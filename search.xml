<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/26/uniapp%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/06/26/uniapp%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<hr><p>title: unicloud初体验</p><h2 id="date-2022-06-25"><a href="#date-2022-06-25" class="headerlink" title="date: 2022-06-25"></a>date: 2022-06-25</h2><p>最近尝试使用unicloud开发了微信小程序，其过程无比艰难(主要因为了解太少… 但还是逐渐得心应手 最终得到想要的效果，那下面就记录一下 我在实践中找过的问题</p><h2 id="uniapp项目转-unicloud"><a href="#uniapp项目转-unicloud" class="headerlink" title="uniapp项目转 unicloud"></a>uniapp项目转 unicloud</h2><p>一开始是准备用前后端分离方式开发的 这样对我来说也更熟练，但转念一想，这个小程序功能简单使用函数和nosql会更清爽，于是改用unicloud，原生微信小程序改云开发是较为麻烦的 需要手动加云函数包改配置等等…. 相比之下unicloud就很方便了</p><blockquote><p>默认创建的话 可以看官网的教程 非常easy 下面记录本地项目转云端的方式</p></blockquote><ul><li>创建云环境</li></ul><p>右击项目根目录，创建云环境</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113224880.png" alt="image-20220626113224880"></p><ul><li>manifest.json文件中获取uniapp的Dcloud Appid</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113402604.png" alt="image-20220626113402604"></p><ul><li>将创建好的云环境于服务空间关联，有则直接关联 没有则多一步 创建后关联 关联后云环境后将会显示关联的空间名称</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113623698.png" alt="image-20220626113623698"></p><p>此时就创建完成了，可以开始在环境内创建云函数 在创建时的web端创建云数据库了</p><h2 id="获取openid"><a href="#获取openid" class="headerlink" title="获取openid"></a>获取openid</h2><p>这个就是一个常见话题了 小程序的openid作为用户唯一标识，支付，登录，授权都离不开它。是我们开发小程序必要的 获取的流程图就不贴了微信文档里有，这里把获取的代码贴一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> appid = <span class="string">&quot;your appid&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> secret = <span class="string">&quot;your secret&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=&quot;</span> + appid </span><br><span class="line">+ <span class="string">&quot;&amp;secret=&quot;</span> + secret </span><br><span class="line">+ <span class="string">&quot;&amp;js_code=&quot;</span> + res.<span class="property">code</span> </span><br><span class="line">+ <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: url, <span class="comment">// 请求路径</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一般在后端中就是发起该请求得到openid, 但是<code>https://api.weixin.qq.com</code> 这个域名不能配置在业务域名中， </p><p>所以不能将这个请求写在小程序代码中，后来改用了云函数触发方式得到openid，这里也贴一下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">//event为客户端上传的参数</span><br><span class="line">console.log(&#x27;event : &#x27;, event)</span><br><span class="line"></span><br><span class="line">const appid = &#x27;your appid&#x27;;</span><br><span class="line">const secret = &#x27;your secret&#x27;;</span><br><span class="line">const apiUrl = &#x27;https://api.weixin.qq.com/sns/jscode2session?appid=&#x27;+appid</span><br><span class="line">+&#x27;&amp;secret=&#x27;+secret</span><br><span class="line">+&#x27;&amp;js_code=&#x27;+event.code</span><br><span class="line">+&#x27;&amp;grant_type=authorization_code&#x27;;</span><br><span class="line">const res = await uniCloud.httpclient.request(apiUrl, &#123;</span><br><span class="line">method: &#x27;GET&#x27;,</span><br><span class="line">data: &#123;&#125;,</span><br><span class="line">contentType: &#x27;json&#x27;, // 指定以application/json发送data内的数据</span><br><span class="line">dataType: &#x27;json&#x27; // 指定返回值为json格式，自动进行parse</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//返回数据给客户端</span><br><span class="line">return res.data.openid</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里也贴一下调用的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">login</span>(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">uniCloud.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;函数名称&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">code</span>: n.<span class="property">code</span></span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;,<span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;云函数调用失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>这部分就不多介绍了 dcloud官网上都有 照着写就完事儿了 觉得复杂的话 这里贴两个demo的外链 供参考</p><p><a href="http://t.zoukankan.com/helloyoyo-p-15015649.html">uniCloud 基础示例（增、删、改、查）</a></p><p><a href="http://t.zoukankan.com/lovejielive-p-14523737.html">uniCloud的简单使用 增删改查</a></p><h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h2><p>这里应该还有一个云函数支付和云函数海报的但是还在操作中 这里先记录这么多 后续再来整理补充…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nvmの使用体验</title>
      <link href="/2022/06/05/nvm%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/06/05/nvm%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>之前有记录一篇因为npm6中无法解析依赖关系数而产生的问题，这主要是因为使用的hexo版本不能很好的兼容旧版的npm，但是发现旧的项目npm不能完美安装了，想要两头兼顾就在网上搜了搜 找到了nvm。</p><h2 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么"></a>nvm是什么</h2><p>nvm是一个node的版本管理工具，可以简单操作node版本的切换、安装、查看。类似于咱Java中的maven。与npm不同的是，npm是依赖包的管理工具。</p><p>nvm使用场景更多在于：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。这类就非常需要nvm这样一个趁手的版本管理工具</p><h2 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h2><p>nvm是mac下的node管理工具，但是咱只有windows，所以一下展示都以win为基础，我们就通过官方推荐的→<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p>安装过程很简单直接next即可</p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//33cd315d026041aa903c02c78b30828f.png" alt="img"  /><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//2860d17bfce641c0b48e539a780c0e03.png" alt="img"  /><p>一路next到install就算安装完成了 默认安装会自动配置nvm的环境变量，安装完成后在命令行窗口输入nvm查看是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605152157660.png" alt="image-20220605152157660"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>这里我们要安装nvm就需要先将原来安装的全局nvm进行卸载，win的卸载很直接 控制面板删除即可，相关的环境配置都会卸载同时删除</p><h2 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm list available          // 查显示可以安装的所有node.js的版本</span><br><span class="line">nvm ls// 查看所有已安装的node.js 版本</span><br><span class="line">nvm install 版本号   // 例如：nvm install 14.19.0</span><br><span class="line">nvm use 版本号             // 切换到使用指定的nodejs版本</span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>这里的切换命令可能出现错误 ，切换时可能存在乱码切换失败的问题 如下图示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605154316963.png" alt="image-20220605154316963"></p><p>这个问题主要有以下可能</p><ul><li>路径中存在空格或中文</li><li>需要用管理员命令行运行</li></ul><p>当我们使用管理员运行时版本正常切换了 也没有了乱码问题</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605154545121.png" alt="image-20220605154545121"></p><ol start="2"><li>贴一些常见命令 作为备用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">nvm命令行操作命令</span><br><span class="line">1,nvm nvm list 是查找本电脑上所有的node版本</span><br><span class="line"> </span><br><span class="line">- nvm list 查看已经安装的版本</span><br><span class="line">- nvm list installed 查看已经安装的版本</span><br><span class="line">- nvm list available 查看网络可以安装的版本</span><br><span class="line"> </span><br><span class="line">2,nvm install 安装最新版本nvm</span><br><span class="line"> </span><br><span class="line">3,nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line"> </span><br><span class="line">4,nvm ls 列出所有版本</span><br><span class="line"> </span><br><span class="line">5,nvm current显示当前版本</span><br><span class="line"> </span><br><span class="line">6,nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line"> </span><br><span class="line">7,nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line"> </span><br><span class="line">8,nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line"> </span><br><span class="line">9,nvm on 打开nodejs控制</span><br><span class="line"> </span><br><span class="line">10,nvm off 关闭nodejs控制</span><br><span class="line"> </span><br><span class="line">11,nvm proxy 查看设置与代理</span><br><span class="line"> </span><br><span class="line">12,nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">　　nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line"> </span><br><span class="line">13,nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line"> </span><br><span class="line">14,nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line"> </span><br><span class="line">15,nvm root [path] 设置和查看root路径</span><br><span class="line"> </span><br><span class="line">16,nvm version 查看当前的版本</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ERESOLVE unable to resolve dependency tree</title>
      <link href="/2022/04/24/ERESOLVE%20unable%20to%20resolve%20dependency%20tree/"/>
      <url>/2022/04/24/ERESOLVE%20unable%20to%20resolve%20dependency%20tree/</url>
      
        <content type="html"><![CDATA[<p>hexo的更新后，node版本也提升了 这时在安装npm包时突然产生了错误</p><blockquote><p>​     <code>ERESOLVE unable to resolve dependency tree</code>    </p></blockquote><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>遇事不解先问百度的，查了下发现是依赖项中存在无法解决的冲突，<code>npm@7</code> 现在尝试安装它们，而<code>npm@6</code>没有。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用 <code>npm i --legacy-peer-deps</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.maple13.cn/posts/8b080878/">Maple13 的 blog</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git在idea中的使用</title>
      <link href="/2022/04/22/git%E5%9C%A8idea%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/22/git%E5%9C%A8idea%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>之前我们记录了git通过命令行对文件的版本控制，现在写一下git结合idea工具实现仓库管理的操作</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>IDEA的上传还是依赖了Git工具，所以还是需要保证已经安装过该工具</p></blockquote><p>打开idea 选择 【File】→【setting】</p><p>在输入框中搜索 <code>git</code>  找到git的相关设置， 在Path to Git executable 设置框找到你安装的目录，默认idea会自动找，如果显示路径正确点击后方 test 按钮 ，如连接成功idea会弹框git的版本，如下图所示</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422110935967.png" alt="image-20220422110935851" style="zoom:80%;" /><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>idea的git操作过程与命令好无异，相当于git的图形化界面操作，同样我们从创建开始记录。</p><h3 id="创建git项目"><a href="#创建git项目" class="headerlink" title="创建git项目"></a>创建git项目</h3><p>创建git项目主要分为两种，已经创建的项目加入git管理和直接克隆git项目</p><h4 id="已创建项目加入git管理"><a href="#已创建项目加入git管理" class="headerlink" title="已创建项目加入git管理"></a>已创建项目加入git管理</h4><p>这里我们简单创建了一个git项目用来演示，这时的项目还是非git管理，</p><h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p>点击菜单栏  <code>VAS</code>  选择创建git 仓库 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422133921414.png" alt="image-20220422133921414"></p><p>这时idea就会弹出选择创建位置的目录，默认会选中当前项目的工作区，这一步就类似于 <code>git init</code> ，我们直接选择ok即可</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422134125145.png" alt="image-20220422134125145" style="zoom:50%;" /><p>点击ok后初始化工作就做完了，在菜单栏上能看到git的快捷工具栏，右下角也能够看到git的分支等信息</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422134343234.png" alt="image-20220422134343234"></p><h5 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h5><p>菜单栏找到 <code>vcs</code>→ <code>git</code> 这时的菜单出现了我们熟悉的命令 诸如分支、标签和合并等，这是我们选择<code>remotes</code>  </p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422144256868.png" alt="image-20220422144256868" style="zoom: 50%;" /><p>这时弹出小窗我们点击添加，然后再url位置输入git的仓库地址 点击ok 界面上就出现了关联的远程仓库地址</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422144812988.png" alt="image-20220422144812988"></p><h4 id="直接克隆git项目"><a href="#直接克隆git项目" class="headerlink" title="直接克隆git项目"></a>直接克隆git项目</h4><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>创建新文件时idea都会默认询问是否进行add操作，如下图，我们点击yes即可完成add操作</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422142620036.png" alt="image-20220422142620036"></p><p>右键项目或文件 找到<code>git</code>→<code>add</code> 这时可以看到文件名从原来的红色变成了绿色</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422143421904.png" alt="image-20220422143421904"></p><h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>这时我们已经完成了文件的添加操作，通过git快捷菜单或者右击项目找到git菜单中的push</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151213352.png" alt="image-20220422151213352" style="zoom:50%;" /><p>这里推荐用快捷菜单的 <code>√</code> 按钮，弹出commit框，点击commit按钮右边的小三角可以将commit和push合并到同一部这样节省一部操作</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151808951.png" alt="image-20220422151808951" style="zoom:67%;" /><p>完成了这里的操作就会在右下角得到系统反馈 这里是上传成功如下图</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151924812.png" alt="image-20220422151924812"></p><h3 id="拉取远程代码"><a href="#拉取远程代码" class="headerlink" title="拉取远程代码"></a>拉取远程代码</h3><p>同样找到git菜单 这里选择pull命令 直接选择pull即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422153011648.png" alt="image-20220422153011648"></p><p>完成后底部会弹出本次更新的文件内容，因为我们的演示内容 刚刚提交pull下来可能会是空返回 所以这里我们再远程仓库里添加了readme文件</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422153637096.png" alt="image-20220422153637096"></p><h3 id="处理分支"><a href="#处理分支" class="headerlink" title="处理分支"></a>处理分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>同样通过vcs找到git命令 选择<code>branches</code> </p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422161025897.png" alt="image-20220422161025897"></p><p>单击ok这样就创建并切换到新分支了 这时我们再以同样的方式将新分支push上去 git会自动创建新分支 上传完成后远程仓库新分支就创建好了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422161704363.png" alt="image-20220422161704363"></p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>右下角点击分支 点击要合并的分支 选择 <code>Merge into Current</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422164134209.png" alt="image-20220422164134209"></p><p>暂时就先记录这些 后续再补充(<em>^_^</em>)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/16/hello-world/"/>
      <url>/2022/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 搭建图床</title>
      <link href="/2022/04/13/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/13/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>平时写文章，经常需要插入图片，免不了需要使用图床工具把本地图片转换成链接。市面上的图床工具非常多，但很多都需要收费，有些免费的也存在着不稳定的风险。而 GitHub 不仅稳定性高，而且简单易用，关键还可以免费白嫖！下面记录下如何更好地利用 GitHub 搭建图床</p><h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3><blockquote><p>在搭建前需要确保你拥有一个github账号，没有的话快去注册一个→ <a href="https://github.com/signup">传送门</a>  </p></blockquote><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421165817401.png"></p><p>创建是仓库选择公开，其他可以使用默认配置，完成点击创建</p><h4 id="使用PicGo上传图片"><a href="#使用PicGo上传图片" class="headerlink" title="使用PicGo上传图片"></a>使用PicGo上传图片</h4><p>PicGo是一个开源软件，使用它能更方便简单的上传图片，并且国内访问github延时高我们上传时可以通过picgo拼接cdn，也可以生成markdown地址方便我们直接使用。</p><h5 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h5><blockquote><p><a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p></blockquote><h5 id="配置picgo"><a href="#配置picgo" class="headerlink" title="配置picgo"></a>配置picgo</h5><p>首先需要在GitHub上配置token 用于picgo操作github仓库<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170321339.png" style="zoom:50%;" />然后在最底部找到Developer settings<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170359013.png" style="zoom:33%;" /></p><p>然后和图示相同创建一条token<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170450895.png"></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170653597.png"></p><p>这时就会产生一条token，！！！(这里token要保存下来，因为只显示一次 没保存下次又要重新来过了。然后我们打开picgo的GitHub图床设置如下图 填写仓库名称也就是[用户名&#x2F;仓库名称], token填写刚刚的，这里可以设置自定义域名也可以置空默认，这里我填的时jsdelivr的cdn加速</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/[%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D]">https://cdn.jsdelivr.net/gh/[用户名/仓库名]</a></p></blockquote><p>这里要注意一定要设置为默认图床，不然默认会使用sm图床可能会报错~</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/Snipaste_2022-04-21_17-54-25.png"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>搭建到这里就完成了，前面使用了 PicGo 工具快速上传图片并获取图片 URL 链接，方便了很多，但是每次都要先在 PicGo 中进行上传，然后将剪切板中链接复制到 MarkDown 编辑器中，有没有更优雅简便的方式，可以将两步合二为一呢？</p><p>可以通过设置typora结合picgo将步骤化繁为简</p><h5 id="Typora配置PicGo上传"><a href="#Typora配置PicGo上传" class="headerlink" title="Typora配置PicGo上传"></a>Typora配置PicGo上传</h5><h6 id="PicGo端"><a href="#PicGo端" class="headerlink" title="PicGo端"></a>PicGo端</h6><p>打开picgo设置找到设置server 开放，设置成打开并开放36677端口 新版默认都是打开的，打开的查看确认下就好</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/serverPort.png"></p><h6 id="Typora端"><a href="#Typora端" class="headerlink" title="Typora端"></a>Typora端</h6><p>打开Typora选择   <strong><code>文件→偏好设置</code></strong>   然后选择  <strong><code>图像</code></strong>  接着按照图片上的序号操作这样写文章时直接复制图片到md文件中就能够自动上传了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421201320799.png" alt="image-20220421201320799"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git的相关使用介绍</title>
      <link href="/2022/04/13/git%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/04/13/git%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>git是一个分布式管理工具，通常用来对软件开发过程中的源代码文件进行管理。适用于多人协作开发 ，通过Git 仓库来存储和管理这些文件。</p><p>git仓库分为两种：</p><ul><li>本地仓库：开发者电脑上的git项目仓库</li><li>远程仓库：远程服务器上的git仓库</li></ul><p>仓库间通过 提交(commit)、推送(push)、拉取(pull) 三种方式进行代码的传递<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220414144701207.png" alt="image-20220414144701207" style="zoom:50%;" /></p><h1 id="git命令行本地安装"><a href="#git命令行本地安装" class="headerlink" title="git命令行本地安装"></a>git命令行本地安装</h1><p>Git 环境目前支持 Linux&#x2F;Unix、Solaris、Mac和 Windows 平台上运行。 Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a></p><p>Windows平台工具下载地址👉<a href="https://gitforwindows.org/">Git for Windows</a> 安装一路next就行 </p><p>安装完成后右击鼠标会出现<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220414161402198.png" alt="image-20220414161402198">字样 GUI是图形化，打开Bash看到命令行窗口就可以开始操作了<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421205801130.png" alt="image-20220421205801130"></p><h2 id="git代码托管"><a href="#git代码托管" class="headerlink" title="git代码托管"></a>git代码托管</h2><p>git的仓库分为本地和远程仓库，远程仓库又分为公有和私有仓库，共有仓库就是互联网上常见的代码托管服务平台，如：GitHub、GItee等，私有仓库则是企业自行搭建的如gitlab的私有化仓库等，使用github等平台需要先注册账号、配置ssh等步骤。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><ol><li><p><strong>本地创建用户信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;// 这里的用户名可以不是账号密码的用户名 是提交代码时使用的名称</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>两步都执行好后 可以通过如下命令查看配置好的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list // 查看全部配置信息</span><br><span class="line">git config user.name(user.email)//查看配置的用户名/邮箱</span><br></pre></td></tr></table></figure><p>返回你的用户名&#x2F;邮箱 就算是配置成功了</p></li><li><p><strong>创建ssh密钥</strong></p><p>创建密钥不是必须的 但这是为了能少输入密码 不然上传下载命令不难 密码难╮(╯▽╰)╭</p><ul><li><p><strong>查看本地是否存在ssh文件</strong></p><p>在主目录 <code>~</code>下查看是否存在<code>.ssh</code>文件目录 ，如果存在文件夹下 应该有文件名含<code>id_rsa</code>的两个文件，其中以<code>.pub</code>结尾的文件是ssh公钥，另一个为私钥</p><p>查看命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure><p>如返回有对应内容的话可以忽略下一部 直接使用文件即可<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415153459219.png" alt="image-20220415153459219"></p><p>如返回为空的话 则可能未生成密钥 那么继续看下一步生成密钥</p></li><li><p>生成ssh密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot; </span><br></pre></td></tr></table></figure><p>通过该命令可以可以生成 对应的密钥文件 期间有几个设置 如：存放位置、密码等  直接回车默认即可 需要可自行设置。如图所示<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415154723336.png" alt="image-20220415154723336"></p></li></ul></li></ol><p>​这时将刚生成的公钥复制 到gitee&#x2F;github等平台找到ssh 添加一条 粘贴公钥即可。(需要输入密码进行确认)</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415165324450.png" alt="image-20220415165324450"></p><p>至此准备工作就做完了， 在正式了解命令前我们还需要记录下Git的一些相关概念。</p><h2 id="git的本地操作"><a href="#git的本地操作" class="headerlink" title="git的本地操作"></a>git的本地操作</h2><h3 id="工作区、暂存区与版本库"><a href="#工作区、暂存区与版本库" class="headerlink" title="工作区、暂存区与版本库"></a>工作区、暂存区与版本库</h3><p>首先我们在工作空间下创建一个项目文件夹，打开git命令行 初始化git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir gitdemo</span><br><span class="line">cd gitdemo</span><br><span class="line"></span><br><span class="line">git init// 初始化git</span><br></pre></td></tr></table></figure><p>这时文件路径状态后多了个<code>(master)</code>  对应的文件夹下也出现了隐藏文件夹 <code>.git</code></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421210049494.png" alt="image-20220421210049494"></p><p>这代表我们已经初始化成功 并处于master分支下 ， 这里的<code>.git</code>文件夹就是版本库 </p><blockquote><p>版本库：存储了相关配置信息、日志、文件版本等信息，由git统一管理</p></blockquote><p>包含<code>.git</code>的同级目录则称之为工作区</p><blockquote><p>工作区：用来存放项目开发代码的目录</p></blockquote><p>从工作区提交到远程仓库时，需要先在本地添加要提交的文件再进行提交，负责推送到远程的内容存储的位置就叫做暂存区，暂存区位于版本库内的index文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416003036432.png" alt="image-20220416003036432"></p><h3 id="git工作区中文件的状态"><a href="#git工作区中文件的状态" class="headerlink" title="git工作区中文件的状态"></a>git工作区中文件的状态</h3><p>git中的文件分为两种状态：</p><ul><li>未跟踪文件<ul><li>指程序内新添加了相关文件 但未提交</li></ul></li><li>已跟踪文件<ul><li>提交到暂存区 会成为暂存状态</li></ul></li></ul><p>我们创建一个<code>test.txt</code>文件在工作区用于演示文件的不同状态，创建文件后，我们在git命令行中输入如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status //用于查看当前工作区、暂存区状态</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416003529621.png" alt="image-20220416003529621"></p><p>图中能够看到文件<code>test.txt</code>文件被标记成了红色，括号中提示我们使用<code>git add &lt;filename&gt;</code>的命令来提交该文件， 我们通过该命令来提交尝试一下并再次查看状态</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004042630.png" alt="image-20220416004042630"></p><blockquote><p>这里我们使用了 git add 命令 这时在版本库中将会创建暂存区文件index 如下图示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004801444.png" alt="image-20220416004801444"></p><p>这是<code>test.txt</code>文件被标记成了绿色代表文件已经纳入版本控制，并且文件前有new file的标识证明是新添加的文件了，这是我们在打开<code>test.txt</code>修改文件的内容看看文件的状态变化</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004336107.png" alt="image-20220416004336107"></p><p>这时文件的变成了红色，文件前标识变成了<code>modified</code> 证明我们修改了文件但没有提交到版本控制，我们再次提交 文件又会回到正常的暂存状态。</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220413120751164.png" alt="image-20220413120751164" style="zoom:80%;" /><p>我们刚刚已经学习过<code>git add</code>命令的使用 它会将文件添加到暂存区 那么如何取消文件暂存呢 通过 <code>git reset</code>就能完成对添加的回退 回退可以指定到某一版本 默认回退到上一版本</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416093455671.png" alt="image-20220416093455671"></p><p>这时<code>test.txt</code>又回到了未提交状态</p><p>我们重新通过<code>commit</code>命令将文件提交到版本库，输入<code>git log</code> 可以查看提交的具体信息</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220420234809543.png" alt="image-20220420234809543"></p><h3 id="git远程命令"><a href="#git远程命令" class="headerlink" title="git远程命令"></a>git远程命令</h3><p>通过上述命令 我们已经对git的本地操作命令有了基本的了解，git管理主要还是本地与远程间的连接与处理，下面我们继续来操作。</p><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><ul><li><p>本地仓库如何与远程仓库关联？ 这里有两种做法 一种是上面我们所使用的本地构建仓库再关联远程仓库 另一种则是通过克隆命令直接克隆指定分支代码并与之关联</p><ul><li><p>本地构建仓库和远程拉起的仓库如何关联</p><p>​首先我们需要在远程托管平台创建一个仓库，这里以gitee做演示 创建仓库这里不再赘述 直接➕然后填写仓库名称即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421000516290.png" alt="image-20220421000516290"></p><p>创建后会有这样一张图 ssh后的地址就是你的仓库地址 接下来我们输入命令与远程仓库进行关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [ssh地址]// 这里的ssh地址也可以用前面的https 用https的话每次提交时可能需要登录认证</span><br></pre></td></tr></table></figure><p>回车后没有返回 这时我们通过<code>git remote</code>命令查看下是否关联成功</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421000943779.png" alt="image-20220421000943779"></p><p>这时如果我们想对远程关联仓库的信息看的更具体些可以通过 <code>-v</code> 参数来查看</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421001110962.png" alt="image-20220421001110962"></p><p>可以清楚的看到我们关联仓库的git地址</p></li><li><p>远程仓库克隆</p><p>这里我们在该项目的上级目录中使用 <code>git clone</code>命令对项目进行克隆，注意上级目录不能是git初始化过的目录(禁止套娃😒)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [git的仓库地址]</span><br></pre></td></tr></table></figure><p>完成后cd到新的项目目录 可以看到本地已经与远程关联了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421084800763.png" alt="image-20220421084800763"></p></li></ul></li></ul><h4 id="拉取与提交"><a href="#拉取与提交" class="headerlink" title="拉取与提交"></a>拉取与提交</h4><h5 id="强制合并"><a href="#强制合并" class="headerlink" title="强制合并"></a>强制合并</h5><p>这时我们切回原本地仓库，之前已经将文件添加到了暂存区，通过<code>git status</code>查看当前本地状态，因为创建仓库时初始化了readme文件，而我们本地没有 所以直接推送就会报错 这时我们先通过拉取命令将远程仓库与本地同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程主机名] [远程分支名]:[本地分支名]   // 分支名相同本地可以省略</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421094349337.png" alt="image-20220421094349337"></p><p>嘎… 本地创建的仓库在初次pull且本地有要提交的内容时就可能会出现这个问题，大致意思是指两个分支版本冲突，这时我们有两种方法</p><ul><li>强制合并拉取</li></ul><p>​本地拉取远程仓库 本地仓库是本地创建且有要提交的内容 我们在<code>git pull</code>命令后添加 &#96; –allow-unrelated-histories       </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421095705793.png" alt="image-20220421095705793"></p><ul><li>强制推送忽略</li></ul><p>​通过添加<code>--force</code> 对本地版本进行强制推送覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure><h5 id="远程推送"><a href="#远程推送" class="headerlink" title="远程推送"></a>远程推送</h5><p>这里我们已经处理了本地与远程的版本冲突 那么我们重新提交我们之间的本地版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程主机名] [本地分支名]:[远程分支名]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421100713748.png" alt="image-20220421100713748"></p><p>这样就推送成功了 打开gitee仓库 能够看到我们本地提交的内容 以及对提交的描述</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421100741006.png" alt="image-20220421100741006"></p><p>上面我们已经完成了本地仓库的拉取和推送，但在实际开发业务中并不能直接推送到主分支更多的可能是操作其他分支 下面我们来模拟多分支的操作</p><p>我们直接通过<code>push</code>命令将本地master分支推送到远程新分支上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:dev</span><br></pre></td></tr></table></figure><p>这时远程没有dev分支会自动创建，推送完成我们打开仓库查看 ,仓库的分支数也从1变成了2，内容也成功推送到了dev分支</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421131059468.png" alt="image-20220421131059468"></p><h4 id="项目分支"><a href="#项目分支" class="headerlink" title="项目分支"></a>项目分支</h4><p>通过<code>git branch</code>能够看到当前本地仓库含有的分支，前面有*号标记的分支是我们当前所处分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [name] // 创建分支</span><br></pre></td></tr></table></figure><p>通过<code>checkout</code>命令 切换到新的分支</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421112350535.png" alt="image-20220421112350535"></p><p>再新的分支下我们在创建一个<code>branchTest.txt</code>文件，提交到版本库，这时我们切换回主分支发现没有这个新文件，本地分支隔离也实现。这时我们希望把代码都合并到主分支该如何处理呢</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>首先我们通过<code>git checkout</code>切换到主分支，通过<code>merge</code>命令合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [要合并的分支名]</span><br></pre></td></tr></table></figure><p>这样就已经将test分支的内容合并到了主分支，当然这时顺利的情况下，在协作开发时假设a和b同时修改了同一个文件那该如何合并呢 合并会保存谁的修改内容呢</p><h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>如果同时修改了同一个文件合并分支时就不能够自动合并了 git会将两个版本的不同内容合并到同一个文件 由用户来决定保留与舍弃内容。还是刚刚的<code>branchTest.txt</code>文件 我们将两个分支下都进行修改并提交到版本库 通过主分支来合并，这时就需要手动处理文件内容  此时的分支名称会变成如下字样</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421143843441.png" alt="image-20220421143843441"></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421143740931.png" alt="image-20220421143740931"></p><p>我们打开提示的<code>branchTest.txt</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421144044736.png" alt="image-20220421144044736"></p><p>两个分支的内容都存在 我们手动修改要保留的内容并将分支提示和和分割线删除保存文件即可。这时我们只是完成了文件内容的修改，我们还需要告知版本库我们已经完成了异常合并处理这里通过<code>git add [filename]</code>命令 再通过commit 提交 这时分支名称会回到原名称 代表冲突处理完成</p><h4 id="版本标签"><a href="#版本标签" class="headerlink" title="版本标签"></a>版本标签</h4><p>分支对于版本来说是动态的 我们更改再提交，多个版本过后，可能就会找不到当时的版本了，标签对于版本来说是静态的，大概类似于订单快照 留存当时的信息，标签能够保存上传时的代码原始状态不受更新影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a [标签名] 【版本号】</span><br></pre></td></tr></table></figure><p>加-a 可以对本次提交的标签进行注解，版本号则是可以对之前提交的版本进行标签追加，回车会进入默认编辑器对该tag进行注解</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421154918707.png" alt="image-20220421154918707"></p><p>这时我们就可以通过<code>git push</code>推送标签到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin [标签名]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421155844612.png" alt="image-20220421155844612"></p><p>至此，git的基本操作内容就结束了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于小程序携带布尔值参数值改变的一点儿记录</title>
      <link href="/2021/06/12/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%A6%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/06/12/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%A6%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ul><li></li></ul><p>小程序从页面携带参数跳转到其他页面是我们通常会这样做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: &#x27;/pages/index/detail?id=&#x27; + id + &#x27;&amp;succeedShow=false&#x27;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>但是 当我们这样做并且携带参数是布尔值时，到达新页面通过onload接收时变量通过 <code>typeof</code>  可见已经由布尔值转变为了字符串的true&#x2F;false，<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220504143618774.png" alt="image-20220504143618774"></p><p>这就导致了不管if还是取反判断都是不成立的。这里我们通过对字符串布尔判断 来使判断成立</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 原三目运算符判断</span><br><span class="line">  succeedShow: options.succeedShow ? options.succeedShow :false</span><br></pre></td></tr></table></figure><p>改为对字符串的判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">succeedShow: (options.succeedShow == &quot;true&quot; ? true : false)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决布尔值变量is开头时 自动生成get/set没有is的问题</title>
      <link href="/2021/06/12/%E8%A7%A3%E5%86%B3%E5%B8%83%E5%B0%94%E5%80%BC%E5%8F%98%E9%87%8Fis%E5%BC%80%E5%A4%B4%E6%97%B6%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90getset%E6%B2%A1%E6%9C%89is%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/06/12/%E8%A7%A3%E5%86%B3%E5%B8%83%E5%B0%94%E5%80%BC%E5%8F%98%E9%87%8Fis%E5%BC%80%E5%A4%B4%E6%97%B6%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90getset%E6%B2%A1%E6%9C%89is%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>当我们在一个类中定义了Boolean或者boolean类型的变量，并且命名时使用<code>is</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用IDEA默认的配置生成get、set方法（快捷键：alt+insert）</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152455835-2107161874.png" alt="img"></p><p>会得到如下结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isEnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnable</span><span class="params">(Boolean enable)</span> &#123;</span><br><span class="line">        isEnable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDelete</span><span class="params">(<span class="type">boolean</span> delete)</span> &#123;</span><br><span class="line">        isDelete = delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，当变量为Boolean类型时，生成的get、set方法会自动去掉is；当变量为boolean时，get方法变为了</p><p>isDelete，set方法自动去掉is。这会导致部分框架在解析的时候报错。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>因为pojo类的命名不能采取is_xx的方式，这会让RPC 框架在反向解 析的时候发生错误。那么已经这样定义的怎么处理呢 简单点可以resultmap中对应 或者用下方展示的方法</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改IDEA生成get、set方法的模板，将上述情况下的变量生成时不忽略is。先用快捷键alt+insert打开菜单，点击<code>Getter and Setter</code></p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152515355-1357051181.png" alt="img"></p><p>然后点击<code>Getter template</code>和<code>Setter template</code>后面的按钮，增加自定义模板</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152529273-1825853771.png" alt="img"></p><p>自定义Getter template为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$paramName</span> = <span class="variable">$helper</span>.getParamName(<span class="variable">$field</span>, <span class="variable">$project</span>))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span>(<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">static ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.type <span class="comment">##</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$name</span> = <span class="variable">$StringUtil</span>.capitalizeWithJavaBeanConvention(<span class="variable">$StringUtil</span>.sanitizeJavaIdentifier(<span class="variable">$helper</span>.getPropertyName(<span class="variable">$field</span>, <span class="variable">$project</span>))))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (<span class="variable">$field</span>.name == <span class="variable">$paramName</span>)</span></span><br><span class="line"><span class="meta prompt_">get#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">getIs#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;name&#125;() &#123;</span></span><br><span class="line">return this.##</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.name;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Setter template为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$paramName</span> = <span class="variable">$helper</span>.getParamName(<span class="variable">$field</span>, <span class="variable">$project</span>))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span>(<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">static ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line">void ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$name</span> = <span class="variable">$StringUtil</span>.capitalizeWithJavaBeanConvention(<span class="variable">$StringUtil</span>.sanitizeJavaIdentifier(<span class="variable">$helper</span>.getPropertyName(<span class="variable">$field</span>, <span class="variable">$project</span>))))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (<span class="variable">$field</span>.name == <span class="variable">$paramName</span>)</span></span><br><span class="line"><span class="meta prompt_">set#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">setIs#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;name&#125;(<span class="variable">$field</span>.<span class="built_in">type</span> <span class="variable">$paramName</span>) &#123;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (!<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">this.##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line">    $classname.##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.name = <span class="variable">$paramName</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>+</code>号新增即可，Setter template也是一样的操作</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152544812-571948054.png" alt="img"></p><p>添加完成后，生成get、set方法时，使用自定义模板即可</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152556332-1852656323.png" alt="img"></p><p>得到结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getIsEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isEnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsEnable</span><span class="params">(Boolean enable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isEnable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getIsDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsDelete</span><span class="params">(<span class="type">boolean</span> delete)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDelete = delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Incorrect string value问题</title>
      <link href="/2020/10/12/%E8%A7%A3%E5%86%B3Incorrect%20string%20value%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/12/%E8%A7%A3%E5%86%B3Incorrect%20string%20value%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li></li></ul><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目修改数据时因为插入emoji 而产生如下问题</p><blockquote><p>Caused by: java.sql.SQLException: Incorrect string value: ‘\xF0\x9F\x98\x98’</p></blockquote><p>出现原因：emoji表情是按照4个字节一个单位进行编码的，而我们使用的utf-8编码在mysql数据库中默认是按照3个字节一个单位进行编码的.</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>首先想到时数据库的设置 是否没有设计成utf8mb4字符集</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220508233955161.png" alt="image-20220508233955161"></p><p>显然不是这个问题，那么我们通过命令来看下 mysql的编码 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输入该查询语句</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span></span><br></pre></td></tr></table></figure><p>得到如下结果</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220508234258678.png" alt="image-20220508234258678"></p><p>我们需要将默认编码的修改成mb4</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在mysql的安装目录下找到my.ini，也可以先上图配置的dir找到大概路径，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>保存修改，重启mysql服务，使修改生效</p><h3 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h3><p>顺嘴一提 这个比较简单，一起记录一下</p><ol><li>win+R ，输入services.msc，打开服务</li></ol><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509001223000.png" alt="image-20220509001223000" style="zoom:50%;" /><ol start="2"><li>在服务中找到myql服务</li></ol><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509001440018.png" alt="image-20220509001440018"></p><p>这里我用的是57我们通过管理员打开命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net stop MySQL57</span><br><span class="line">MySQL57 服务正在停止..</span><br><span class="line">MySQL57 服务已成功停止。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;net start MySQL57</span><br><span class="line">MySQL57 服务正在启动 .</span><br><span class="line">MySQL57 服务已经启动成功。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时修改的配置也已经生效了 </p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509002111890.png" alt="image-20220509002111890"></p><p>回去查看 emoji已经能够正常写入了~ 😀</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
