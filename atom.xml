<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘忧君の部落格</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-27T01:27:10.474Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>忘忧君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>unicloud初体验</title>
    <link href="http://example.com/2022/06/25/unicloud%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2022/06/25/unicloud%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2022-06-24T16:00:00.000Z</published>
    <updated>2022-06-27T01:27:10.474Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试使用unicloud开发了微信小程序，其过程无比艰难(主要因为了解太少… 但还是逐渐得心应手 最终得到想要的效果，那下面就记录一下 我在实践中找过的问题</p><h2 id="uniapp项目转-unicloud"><a href="#uniapp项目转-unicloud" class="headerlink" title="uniapp项目转 unicloud"></a>uniapp项目转 unicloud</h2><p>一开始是准备用前后端分离方式开发的 这样对我来说也更熟练，但转念一想，这个小程序功能简单使用函数和nosql会更清爽，于是改用unicloud，原生微信小程序改云开发是较为麻烦的 需要手动加云函数包改配置等等…. 相比之下unicloud就很方便了</p><blockquote><p>默认创建的话 可以看官网的教程 非常easy 下面记录本地项目转云端的方式</p></blockquote><ul><li>创建云环境</li></ul><p>右击项目根目录，创建云环境</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113224880.png" alt="image-20220626113224880"></p><ul><li>manifest.json文件中获取uniapp的Dcloud Appid</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113402604.png" alt="image-20220626113402604"></p><ul><li>将创建好的云环境于服务空间关联，有则直接关联 没有则多一步 创建后关联 关联后云环境后将会显示关联的空间名称</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220626113623698.png" alt="image-20220626113623698"></p><p>此时就创建完成了，可以开始在环境内创建云函数 在创建时的web端创建云数据库了</p><h2 id="获取openid"><a href="#获取openid" class="headerlink" title="获取openid"></a>获取openid</h2><p>这个就是一个常见话题了 小程序的openid作为用户唯一标识，支付，登录，授权都离不开它。是我们开发小程序必要的 获取的流程图就不贴了微信文档里有，这里把获取的代码贴一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> appid = <span class="string">&quot;your appid&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> secret = <span class="string">&quot;your secret&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=&quot;</span> + appid </span><br><span class="line">+ <span class="string">&quot;&amp;secret=&quot;</span> + secret </span><br><span class="line">+ <span class="string">&quot;&amp;js_code=&quot;</span> + res.<span class="property">code</span> </span><br><span class="line">+ <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: url, <span class="comment">// 请求路径</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一般在后端中就是发起该请求得到openid, 但是<code>https://api.weixin.qq.com</code> 这个域名不能配置在业务域名中， </p><p>所以不能将这个请求写在小程序代码中，后来改用了云函数触发方式得到openid，这里也贴一下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">//event为客户端上传的参数</span><br><span class="line">console.log(&#x27;event : &#x27;, event)</span><br><span class="line"></span><br><span class="line">const appid = &#x27;your appid&#x27;;</span><br><span class="line">const secret = &#x27;your secret&#x27;;</span><br><span class="line">const apiUrl = &#x27;https://api.weixin.qq.com/sns/jscode2session?appid=&#x27;+appid</span><br><span class="line">+&#x27;&amp;secret=&#x27;+secret</span><br><span class="line">+&#x27;&amp;js_code=&#x27;+event.code</span><br><span class="line">+&#x27;&amp;grant_type=authorization_code&#x27;;</span><br><span class="line">const res = await uniCloud.httpclient.request(apiUrl, &#123;</span><br><span class="line">method: &#x27;GET&#x27;,</span><br><span class="line">data: &#123;&#125;,</span><br><span class="line">contentType: &#x27;json&#x27;, // 指定以application/json发送data内的数据</span><br><span class="line">dataType: &#x27;json&#x27; // 指定返回值为json格式，自动进行parse</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//返回数据给客户端</span><br><span class="line">return res.data.openid</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里也贴一下调用的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">login</span>(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">uniCloud.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;函数名称&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">code</span>: n.<span class="property">code</span></span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;,<span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;云函数调用失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>这部分就不多介绍了 dcloud官网上都有 照着写就完事儿了 觉得复杂的话 这里贴两个demo的外链 供参考</p><p><a href="http://t.zoukankan.com/helloyoyo-p-15015649.html">uniCloud 基础示例（增、删、改、查）</a></p><p><a href="http://t.zoukankan.com/lovejielive-p-14523737.html">uniCloud的简单使用 增删改查</a></p><h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h2><p>这里应该还有一个云函数支付和云函数海报的但是还在操作中 这里先记录这么多 后续再来整理补充…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近尝试使用unicloud开发了微信小程序，其过程无比艰难(主要因为了解太少… 但还是逐渐得心应手 最终得到想要的效果，那下面就记录一下 我在实践中找过的问题&lt;/p&gt;
&lt;h2 id=&quot;uniapp项目转-unicloud&quot;&gt;&lt;a href=&quot;#uniapp项目转-unic</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nvmの使用体验</title>
    <link href="http://example.com/2022/06/05/nvm%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2022/06/05/nvm%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</id>
    <published>2022-06-04T16:00:00.000Z</published>
    <updated>2022-06-05T07:48:29.174Z</updated>
    
    <content type="html"><![CDATA[<p>之前有记录一篇因为npm6中无法解析依赖关系数而产生的问题，这主要是因为使用的hexo版本不能很好的兼容旧版的npm，但是发现旧的项目npm不能完美安装了，想要两头兼顾就在网上搜了搜 找到了nvm。</p><h2 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么"></a>nvm是什么</h2><p>nvm是一个node的版本管理工具，可以简单操作node版本的切换、安装、查看。类似于咱Java中的maven。与npm不同的是，npm是依赖包的管理工具。</p><p>nvm使用场景更多在于：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。这类就非常需要nvm这样一个趁手的版本管理工具</p><h2 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h2><p>nvm是mac下的node管理工具，但是咱只有windows，所以一下展示都以win为基础，我们就通过官方推荐的→<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p>安装过程很简单直接next即可</p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//33cd315d026041aa903c02c78b30828f.png" alt="img"  /><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//2860d17bfce641c0b48e539a780c0e03.png" alt="img"  /><p>一路next到install就算安装完成了 默认安装会自动配置nvm的环境变量，安装完成后在命令行窗口输入nvm查看是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605152157660.png" alt="image-20220605152157660"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>这里我们要安装nvm就需要先将原来安装的全局nvm进行卸载，win的卸载很直接 控制面板删除即可，相关的环境配置都会卸载同时删除</p><h2 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm list available          // 查显示可以安装的所有node.js的版本</span><br><span class="line">nvm ls// 查看所有已安装的node.js 版本</span><br><span class="line">nvm install 版本号   // 例如：nvm install 14.19.0</span><br><span class="line">nvm use 版本号             // 切换到使用指定的nodejs版本</span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>这里的切换命令可能出现错误 ，切换时可能存在乱码切换失败的问题 如下图示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605154316963.png" alt="image-20220605154316963"></p><p>这个问题主要有以下可能</p><ul><li>路径中存在空格或中文</li><li>需要用管理员命令行运行</li></ul><p>当我们使用管理员运行时版本正常切换了 也没有了乱码问题</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic//image-20220605154545121.png" alt="image-20220605154545121"></p><ol start="2"><li>贴一些常见命令 作为备用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">nvm命令行操作命令</span><br><span class="line">1,nvm nvm list 是查找本电脑上所有的node版本</span><br><span class="line"> </span><br><span class="line">- nvm list 查看已经安装的版本</span><br><span class="line">- nvm list installed 查看已经安装的版本</span><br><span class="line">- nvm list available 查看网络可以安装的版本</span><br><span class="line"> </span><br><span class="line">2,nvm install 安装最新版本nvm</span><br><span class="line"> </span><br><span class="line">3,nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line"> </span><br><span class="line">4,nvm ls 列出所有版本</span><br><span class="line"> </span><br><span class="line">5,nvm current显示当前版本</span><br><span class="line"> </span><br><span class="line">6,nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line"> </span><br><span class="line">7,nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line"> </span><br><span class="line">8,nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line"> </span><br><span class="line">9,nvm on 打开nodejs控制</span><br><span class="line"> </span><br><span class="line">10,nvm off 关闭nodejs控制</span><br><span class="line"> </span><br><span class="line">11,nvm proxy 查看设置与代理</span><br><span class="line"> </span><br><span class="line">12,nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">　　nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line"> </span><br><span class="line">13,nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line"> </span><br><span class="line">14,nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line"> </span><br><span class="line">15,nvm root [path] 设置和查看root路径</span><br><span class="line"> </span><br><span class="line">16,nvm version 查看当前的版本</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前有记录一篇因为npm6中无法解析依赖关系数而产生的问题，这主要是因为使用的hexo版本不能很好的兼容旧版的npm，但是发现旧的项目npm不能完美安装了，想要两头兼顾就在网上搜了搜 找到了nvm。&lt;/p&gt;
&lt;h2 id=&quot;nvm是什么&quot;&gt;&lt;a href=&quot;#nvm是什么&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ERESOLVE unable to resolve dependency tree</title>
    <link href="http://example.com/2022/04/24/ERESOLVE%20unable%20to%20resolve%20dependency%20tree/"/>
    <id>http://example.com/2022/04/24/ERESOLVE%20unable%20to%20resolve%20dependency%20tree/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-04-24T16:04:40.284Z</updated>
    
    <content type="html"><![CDATA[<p>hexo的更新后，node版本也提升了 这时在安装npm包时突然产生了错误</p><blockquote><p>​     <code>ERESOLVE unable to resolve dependency tree</code>    </p></blockquote><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>遇事不解先问百度的，查了下发现是依赖项中存在无法解决的冲突，<code>npm@7</code> 现在尝试安装它们，而<code>npm@6</code>没有。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用 <code>npm i --legacy-peer-deps</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.maple13.cn/posts/8b080878/">Maple13 的 blog</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo的更新后，node版本也提升了 这时在安装npm包时突然产生了错误&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​     &lt;code&gt;ERESOLVE unable to resolve dependency tree&lt;/code&gt;    &lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git在idea中的使用</title>
    <link href="http://example.com/2022/04/22/git%E5%9C%A8idea%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/04/22/git%E5%9C%A8idea%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-21T16:00:00.000Z</published>
    <updated>2022-04-22T09:39:41.063Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们记录了git通过命令行对文件的版本控制，现在写一下git结合idea工具实现仓库管理的操作</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>IDEA的上传还是依赖了Git工具，所以还是需要保证已经安装过该工具</p></blockquote><p>打开idea 选择 【File】→【setting】</p><p>在输入框中搜索 <code>git</code>  找到git的相关设置， 在Path to Git executable 设置框找到你安装的目录，默认idea会自动找，如果显示路径正确点击后方 test 按钮 ，如连接成功idea会弹框git的版本，如下图所示</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422110935967.png" alt="image-20220422110935851" style="zoom:80%;" /><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>idea的git操作过程与命令好无异，相当于git的图形化界面操作，同样我们从创建开始记录。</p><h3 id="创建git项目"><a href="#创建git项目" class="headerlink" title="创建git项目"></a>创建git项目</h3><p>创建git项目主要分为两种，已经创建的项目加入git管理和直接克隆git项目</p><h4 id="已创建项目加入git管理"><a href="#已创建项目加入git管理" class="headerlink" title="已创建项目加入git管理"></a>已创建项目加入git管理</h4><p>这里我们简单创建了一个git项目用来演示，这时的项目还是非git管理，</p><h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p>点击菜单栏  <code>VAS</code>  选择创建git 仓库 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422133921414.png" alt="image-20220422133921414"></p><p>这时idea就会弹出选择创建位置的目录，默认会选中当前项目的工作区，这一步就类似于 <code>git init</code> ，我们直接选择ok即可</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422134125145.png" alt="image-20220422134125145" style="zoom:50%;" /><p>点击ok后初始化工作就做完了，在菜单栏上能看到git的快捷工具栏，右下角也能够看到git的分支等信息</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422134343234.png" alt="image-20220422134343234"></p><h5 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h5><p>菜单栏找到 <code>vcs</code>→ <code>git</code> 这时的菜单出现了我们熟悉的命令 诸如分支、标签和合并等，这是我们选择<code>remotes</code>  </p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422144256868.png" alt="image-20220422144256868" style="zoom: 50%;" /><p>这时弹出小窗我们点击添加，然后再url位置输入git的仓库地址 点击ok 界面上就出现了关联的远程仓库地址</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422144812988.png" alt="image-20220422144812988"></p><h4 id="直接克隆git项目"><a href="#直接克隆git项目" class="headerlink" title="直接克隆git项目"></a>直接克隆git项目</h4><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>创建新文件时idea都会默认询问是否进行add操作，如下图，我们点击yes即可完成add操作</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422142620036.png" alt="image-20220422142620036"></p><p>右键项目或文件 找到<code>git</code>→<code>add</code> 这时可以看到文件名从原来的红色变成了绿色</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422143421904.png" alt="image-20220422143421904"></p><h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>这时我们已经完成了文件的添加操作，通过git快捷菜单或者右击项目找到git菜单中的push</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151213352.png" alt="image-20220422151213352" style="zoom:50%;" /><p>这里推荐用快捷菜单的 <code>√</code> 按钮，弹出commit框，点击commit按钮右边的小三角可以将commit和push合并到同一部这样节省一部操作</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151808951.png" alt="image-20220422151808951" style="zoom:67%;" /><p>完成了这里的操作就会在右下角得到系统反馈 这里是上传成功如下图</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422151924812.png" alt="image-20220422151924812"></p><h3 id="拉取远程代码"><a href="#拉取远程代码" class="headerlink" title="拉取远程代码"></a>拉取远程代码</h3><p>同样找到git菜单 这里选择pull命令 直接选择pull即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422153011648.png" alt="image-20220422153011648"></p><p>完成后底部会弹出本次更新的文件内容，因为我们的演示内容 刚刚提交pull下来可能会是空返回 所以这里我们再远程仓库里添加了readme文件</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422153637096.png" alt="image-20220422153637096"></p><h3 id="处理分支"><a href="#处理分支" class="headerlink" title="处理分支"></a>处理分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>同样通过vcs找到git命令 选择<code>branches</code> </p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422161025897.png" alt="image-20220422161025897"></p><p>单击ok这样就创建并切换到新分支了 这时我们再以同样的方式将新分支push上去 git会自动创建新分支 上传完成后远程仓库新分支就创建好了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422161704363.png" alt="image-20220422161704363"></p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>右下角点击分支 点击要合并的分支 选择 <code>Merge into Current</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220422164134209.png" alt="image-20220422164134209"></p><p>暂时就先记录这些 后续再补充(<em>^_^</em>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前我们记录了git通过命令行对文件的版本控制，现在写一下git结合idea工具实现仓库管理的操作&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;blockqu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GitHub 搭建图床</title>
    <link href="http://example.com/2022/04/13/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>http://example.com/2022/04/13/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-04-12T16:00:00.000Z</published>
    <updated>2022-04-21T12:24:04.744Z</updated>
    
    <content type="html"><![CDATA[<p>平时写文章，经常需要插入图片，免不了需要使用图床工具把本地图片转换成链接。市面上的图床工具非常多，但很多都需要收费，有些免费的也存在着不稳定的风险。而 GitHub 不仅稳定性高，而且简单易用，关键还可以免费白嫖！下面记录下如何更好地利用 GitHub 搭建图床</p><h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3><blockquote><p>在搭建前需要确保你拥有一个github账号，没有的话快去注册一个→ <a href="https://github.com/signup">传送门</a>  </p></blockquote><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421165817401.png"></p><p>创建是仓库选择公开，其他可以使用默认配置，完成点击创建</p><h4 id="使用PicGo上传图片"><a href="#使用PicGo上传图片" class="headerlink" title="使用PicGo上传图片"></a>使用PicGo上传图片</h4><p>PicGo是一个开源软件，使用它能更方便简单的上传图片，并且国内访问github延时高我们上传时可以通过picgo拼接cdn，也可以生成markdown地址方便我们直接使用。</p><h5 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h5><blockquote><p><a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p></blockquote><h5 id="配置picgo"><a href="#配置picgo" class="headerlink" title="配置picgo"></a>配置picgo</h5><p>首先需要在GitHub上配置token 用于picgo操作github仓库<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170321339.png" style="zoom:50%;" />然后在最底部找到Developer settings<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170359013.png" style="zoom:33%;" /></p><p>然后和图示相同创建一条token<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170450895.png"></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421170653597.png"></p><p>这时就会产生一条token，！！！(这里token要保存下来，因为只显示一次 没保存下次又要重新来过了。然后我们打开picgo的GitHub图床设置如下图 填写仓库名称也就是[用户名&#x2F;仓库名称], token填写刚刚的，这里可以设置自定义域名也可以置空默认，这里我填的时jsdelivr的cdn加速</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/[%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D]">https://cdn.jsdelivr.net/gh/[用户名/仓库名]</a></p></blockquote><p>这里要注意一定要设置为默认图床，不然默认会使用sm图床可能会报错~</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/Snipaste_2022-04-21_17-54-25.png"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>搭建到这里就完成了，前面使用了 PicGo 工具快速上传图片并获取图片 URL 链接，方便了很多，但是每次都要先在 PicGo 中进行上传，然后将剪切板中链接复制到 MarkDown 编辑器中，有没有更优雅简便的方式，可以将两步合二为一呢？</p><p>可以通过设置typora结合picgo将步骤化繁为简</p><h5 id="Typora配置PicGo上传"><a href="#Typora配置PicGo上传" class="headerlink" title="Typora配置PicGo上传"></a>Typora配置PicGo上传</h5><h6 id="PicGo端"><a href="#PicGo端" class="headerlink" title="PicGo端"></a>PicGo端</h6><p>打开picgo设置找到设置server 开放，设置成打开并开放36677端口 新版默认都是打开的，打开的查看确认下就好</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/serverPort.png"></p><h6 id="Typora端"><a href="#Typora端" class="headerlink" title="Typora端"></a>Typora端</h6><p>打开Typora选择   <strong><code>文件→偏好设置</code></strong>   然后选择  <strong><code>图像</code></strong>  接着按照图片上的序号操作这样写文章时直接复制图片到md文件中就能够自动上传了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421201320799.png" alt="image-20220421201320799"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;平时写文章，经常需要插入图片，免不了需要使用图床工具把本地图片转换成链接。市面上的图床工具非常多，但很多都需要收费，有些免费的也存在着不稳定的风险。而 GitHub 不仅稳定性高，而且简单易用，关键还可以免费白嫖！下面记录下如何更好地利用 GitHub 搭建图床&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git的相关使用介绍</title>
    <link href="http://example.com/2022/04/13/git%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/04/13/git%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-04-12T16:00:00.000Z</published>
    <updated>2022-04-21T15:21:02.717Z</updated>
    
    <content type="html"><![CDATA[<p>git是一个分布式管理工具，通常用来对软件开发过程中的源代码文件进行管理。适用于多人协作开发 ，通过Git 仓库来存储和管理这些文件。</p><p>git仓库分为两种：</p><ul><li>本地仓库：开发者电脑上的git项目仓库</li><li>远程仓库：远程服务器上的git仓库</li></ul><p>仓库间通过 提交(commit)、推送(push)、拉取(pull) 三种方式进行代码的传递<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220414144701207.png" alt="image-20220414144701207" style="zoom:50%;" /></p><h1 id="git命令行本地安装"><a href="#git命令行本地安装" class="headerlink" title="git命令行本地安装"></a>git命令行本地安装</h1><p>Git 环境目前支持 Linux&#x2F;Unix、Solaris、Mac和 Windows 平台上运行。 Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a></p><p>Windows平台工具下载地址👉<a href="https://gitforwindows.org/">Git for Windows</a> 安装一路next就行 </p><p>安装完成后右击鼠标会出现<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220414161402198.png" alt="image-20220414161402198">字样 GUI是图形化，打开Bash看到命令行窗口就可以开始操作了<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421205801130.png" alt="image-20220421205801130"></p><h2 id="git代码托管"><a href="#git代码托管" class="headerlink" title="git代码托管"></a>git代码托管</h2><p>git的仓库分为本地和远程仓库，远程仓库又分为公有和私有仓库，共有仓库就是互联网上常见的代码托管服务平台，如：GitHub、GItee等，私有仓库则是企业自行搭建的如gitlab的私有化仓库等，使用github等平台需要先注册账号、配置ssh等步骤。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><ol><li><p><strong>本地创建用户信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;// 这里的用户名可以不是账号密码的用户名 是提交代码时使用的名称</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>两步都执行好后 可以通过如下命令查看配置好的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list // 查看全部配置信息</span><br><span class="line">git config user.name(user.email)//查看配置的用户名/邮箱</span><br></pre></td></tr></table></figure><p>返回你的用户名&#x2F;邮箱 就算是配置成功了</p></li><li><p><strong>创建ssh密钥</strong></p><p>创建密钥不是必须的 但这是为了能少输入密码 不然上传下载命令不难 密码难╮(╯▽╰)╭</p><ul><li><p><strong>查看本地是否存在ssh文件</strong></p><p>在主目录 <code>~</code>下查看是否存在<code>.ssh</code>文件目录 ，如果存在文件夹下 应该有文件名含<code>id_rsa</code>的两个文件，其中以<code>.pub</code>结尾的文件是ssh公钥，另一个为私钥</p><p>查看命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure><p>如返回有对应内容的话可以忽略下一部 直接使用文件即可<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415153459219.png" alt="image-20220415153459219"></p><p>如返回为空的话 则可能未生成密钥 那么继续看下一步生成密钥</p></li><li><p>生成ssh密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot; </span><br></pre></td></tr></table></figure><p>通过该命令可以可以生成 对应的密钥文件 期间有几个设置 如：存放位置、密码等  直接回车默认即可 需要可自行设置。如图所示<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415154723336.png" alt="image-20220415154723336"></p></li></ul></li></ol><p>​这时将刚生成的公钥复制 到gitee&#x2F;github等平台找到ssh 添加一条 粘贴公钥即可。(需要输入密码进行确认)</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220415165324450.png" alt="image-20220415165324450"></p><p>至此准备工作就做完了， 在正式了解命令前我们还需要记录下Git的一些相关概念。</p><h2 id="git的本地操作"><a href="#git的本地操作" class="headerlink" title="git的本地操作"></a>git的本地操作</h2><h3 id="工作区、暂存区与版本库"><a href="#工作区、暂存区与版本库" class="headerlink" title="工作区、暂存区与版本库"></a>工作区、暂存区与版本库</h3><p>首先我们在工作空间下创建一个项目文件夹，打开git命令行 初始化git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir gitdemo</span><br><span class="line">cd gitdemo</span><br><span class="line"></span><br><span class="line">git init// 初始化git</span><br></pre></td></tr></table></figure><p>这时文件路径状态后多了个<code>(master)</code>  对应的文件夹下也出现了隐藏文件夹 <code>.git</code></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421210049494.png" alt="image-20220421210049494"></p><p>这代表我们已经初始化成功 并处于master分支下 ， 这里的<code>.git</code>文件夹就是版本库 </p><blockquote><p>版本库：存储了相关配置信息、日志、文件版本等信息，由git统一管理</p></blockquote><p>包含<code>.git</code>的同级目录则称之为工作区</p><blockquote><p>工作区：用来存放项目开发代码的目录</p></blockquote><p>从工作区提交到远程仓库时，需要先在本地添加要提交的文件再进行提交，负责推送到远程的内容存储的位置就叫做暂存区，暂存区位于版本库内的index文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416003036432.png" alt="image-20220416003036432"></p><h3 id="git工作区中文件的状态"><a href="#git工作区中文件的状态" class="headerlink" title="git工作区中文件的状态"></a>git工作区中文件的状态</h3><p>git中的文件分为两种状态：</p><ul><li>未跟踪文件<ul><li>指程序内新添加了相关文件 但未提交</li></ul></li><li>已跟踪文件<ul><li>提交到暂存区 会成为暂存状态</li></ul></li></ul><p>我们创建一个<code>test.txt</code>文件在工作区用于演示文件的不同状态，创建文件后，我们在git命令行中输入如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status //用于查看当前工作区、暂存区状态</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416003529621.png" alt="image-20220416003529621"></p><p>图中能够看到文件<code>test.txt</code>文件被标记成了红色，括号中提示我们使用<code>git add &lt;filename&gt;</code>的命令来提交该文件， 我们通过该命令来提交尝试一下并再次查看状态</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004042630.png" alt="image-20220416004042630"></p><blockquote><p>这里我们使用了 git add 命令 这时在版本库中将会创建暂存区文件index 如下图示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004801444.png" alt="image-20220416004801444"></p><p>这是<code>test.txt</code>文件被标记成了绿色代表文件已经纳入版本控制，并且文件前有new file的标识证明是新添加的文件了，这是我们在打开<code>test.txt</code>修改文件的内容看看文件的状态变化</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416004336107.png" alt="image-20220416004336107"></p><p>这时文件的变成了红色，文件前标识变成了<code>modified</code> 证明我们修改了文件但没有提交到版本控制，我们再次提交 文件又会回到正常的暂存状态。</p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220413120751164.png" alt="image-20220413120751164" style="zoom:80%;" /><p>我们刚刚已经学习过<code>git add</code>命令的使用 它会将文件添加到暂存区 那么如何取消文件暂存呢 通过 <code>git reset</code>就能完成对添加的回退 回退可以指定到某一版本 默认回退到上一版本</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220416093455671.png" alt="image-20220416093455671"></p><p>这时<code>test.txt</code>又回到了未提交状态</p><p>我们重新通过<code>commit</code>命令将文件提交到版本库，输入<code>git log</code> 可以查看提交的具体信息</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220420234809543.png" alt="image-20220420234809543"></p><h3 id="git远程命令"><a href="#git远程命令" class="headerlink" title="git远程命令"></a>git远程命令</h3><p>通过上述命令 我们已经对git的本地操作命令有了基本的了解，git管理主要还是本地与远程间的连接与处理，下面我们继续来操作。</p><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><ul><li><p>本地仓库如何与远程仓库关联？ 这里有两种做法 一种是上面我们所使用的本地构建仓库再关联远程仓库 另一种则是通过克隆命令直接克隆指定分支代码并与之关联</p><ul><li><p>本地构建仓库和远程拉起的仓库如何关联</p><p>​首先我们需要在远程托管平台创建一个仓库，这里以gitee做演示 创建仓库这里不再赘述 直接➕然后填写仓库名称即可</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421000516290.png" alt="image-20220421000516290"></p><p>创建后会有这样一张图 ssh后的地址就是你的仓库地址 接下来我们输入命令与远程仓库进行关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [ssh地址]// 这里的ssh地址也可以用前面的https 用https的话每次提交时可能需要登录认证</span><br></pre></td></tr></table></figure><p>回车后没有返回 这时我们通过<code>git remote</code>命令查看下是否关联成功</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421000943779.png" alt="image-20220421000943779"></p><p>这时如果我们想对远程关联仓库的信息看的更具体些可以通过 <code>-v</code> 参数来查看</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421001110962.png" alt="image-20220421001110962"></p><p>可以清楚的看到我们关联仓库的git地址</p></li><li><p>远程仓库克隆</p><p>这里我们在该项目的上级目录中使用 <code>git clone</code>命令对项目进行克隆，注意上级目录不能是git初始化过的目录(禁止套娃😒)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [git的仓库地址]</span><br></pre></td></tr></table></figure><p>完成后cd到新的项目目录 可以看到本地已经与远程关联了</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421084800763.png" alt="image-20220421084800763"></p></li></ul></li></ul><h4 id="拉取与提交"><a href="#拉取与提交" class="headerlink" title="拉取与提交"></a>拉取与提交</h4><h5 id="强制合并"><a href="#强制合并" class="headerlink" title="强制合并"></a>强制合并</h5><p>这时我们切回原本地仓库，之前已经将文件添加到了暂存区，通过<code>git status</code>查看当前本地状态，因为创建仓库时初始化了readme文件，而我们本地没有 所以直接推送就会报错 这时我们先通过拉取命令将远程仓库与本地同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程主机名] [远程分支名]:[本地分支名]   // 分支名相同本地可以省略</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421094349337.png" alt="image-20220421094349337"></p><p>嘎… 本地创建的仓库在初次pull且本地有要提交的内容时就可能会出现这个问题，大致意思是指两个分支版本冲突，这时我们有两种方法</p><ul><li>强制合并拉取</li></ul><p>​本地拉取远程仓库 本地仓库是本地创建且有要提交的内容 我们在<code>git pull</code>命令后添加 &#96; –allow-unrelated-histories       </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421095705793.png" alt="image-20220421095705793"></p><ul><li>强制推送忽略</li></ul><p>​通过添加<code>--force</code> 对本地版本进行强制推送覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure><h5 id="远程推送"><a href="#远程推送" class="headerlink" title="远程推送"></a>远程推送</h5><p>这里我们已经处理了本地与远程的版本冲突 那么我们重新提交我们之间的本地版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程主机名] [本地分支名]:[远程分支名]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421100713748.png" alt="image-20220421100713748"></p><p>这样就推送成功了 打开gitee仓库 能够看到我们本地提交的内容 以及对提交的描述</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421100741006.png" alt="image-20220421100741006"></p><p>上面我们已经完成了本地仓库的拉取和推送，但在实际开发业务中并不能直接推送到主分支更多的可能是操作其他分支 下面我们来模拟多分支的操作</p><p>我们直接通过<code>push</code>命令将本地master分支推送到远程新分支上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:dev</span><br></pre></td></tr></table></figure><p>这时远程没有dev分支会自动创建，推送完成我们打开仓库查看 ,仓库的分支数也从1变成了2，内容也成功推送到了dev分支</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421131059468.png" alt="image-20220421131059468"></p><h4 id="项目分支"><a href="#项目分支" class="headerlink" title="项目分支"></a>项目分支</h4><p>通过<code>git branch</code>能够看到当前本地仓库含有的分支，前面有*号标记的分支是我们当前所处分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [name] // 创建分支</span><br></pre></td></tr></table></figure><p>通过<code>checkout</code>命令 切换到新的分支</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421112350535.png" alt="image-20220421112350535"></p><p>再新的分支下我们在创建一个<code>branchTest.txt</code>文件，提交到版本库，这时我们切换回主分支发现没有这个新文件，本地分支隔离也实现。这时我们希望把代码都合并到主分支该如何处理呢</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>首先我们通过<code>git checkout</code>切换到主分支，通过<code>merge</code>命令合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [要合并的分支名]</span><br></pre></td></tr></table></figure><p>这样就已经将test分支的内容合并到了主分支，当然这时顺利的情况下，在协作开发时假设a和b同时修改了同一个文件那该如何合并呢 合并会保存谁的修改内容呢</p><h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>如果同时修改了同一个文件合并分支时就不能够自动合并了 git会将两个版本的不同内容合并到同一个文件 由用户来决定保留与舍弃内容。还是刚刚的<code>branchTest.txt</code>文件 我们将两个分支下都进行修改并提交到版本库 通过主分支来合并，这时就需要手动处理文件内容  此时的分支名称会变成如下字样</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421143843441.png" alt="image-20220421143843441"></p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421143740931.png" alt="image-20220421143740931"></p><p>我们打开提示的<code>branchTest.txt</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421144044736.png" alt="image-20220421144044736"></p><p>两个分支的内容都存在 我们手动修改要保留的内容并将分支提示和和分割线删除保存文件即可。这时我们只是完成了文件内容的修改，我们还需要告知版本库我们已经完成了异常合并处理这里通过<code>git add [filename]</code>命令 再通过commit 提交 这时分支名称会回到原名称 代表冲突处理完成</p><h4 id="版本标签"><a href="#版本标签" class="headerlink" title="版本标签"></a>版本标签</h4><p>分支对于版本来说是动态的 我们更改再提交，多个版本过后，可能就会找不到当时的版本了，标签对于版本来说是静态的，大概类似于订单快照 留存当时的信息，标签能够保存上传时的代码原始状态不受更新影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a [标签名] 【版本号】</span><br></pre></td></tr></table></figure><p>加-a 可以对本次提交的标签进行注解，版本号则是可以对之前提交的版本进行标签追加，回车会进入默认编辑器对该tag进行注解</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421154918707.png" alt="image-20220421154918707"></p><p>这时我们就可以通过<code>git push</code>推送标签到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin [标签名]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220421155844612.png" alt="image-20220421155844612"></p><p>至此，git的基本操作内容就结束了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git是一个分布式管理工具，通常用来对软件开发过程中的源代码文件进行管理。适用于多人协作开发 ，通过Git 仓库来存储和管理这些文件。&lt;/p&gt;
&lt;p&gt;git仓库分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地仓库：开发者电脑上的git项目仓库&lt;/li&gt;
&lt;li&gt;远程仓库：远程服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js 日期工具类专场</title>
    <link href="http://example.com/2021/06/28/js%20%E6%97%A5%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B8%93%E5%9C%BA/"/>
    <id>http://example.com/2021/06/28/js%20%E6%97%A5%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B8%93%E5%9C%BA/</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2022-07-03T09:42:15.677Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><blockquote><p>这里记录下常见的js时间工具类方法</p></blockquote><h2 id="JS获取当前时间的对应日期格式"><a href="#JS获取当前时间的对应日期格式" class="headerlink" title="JS获取当前时间的对应日期格式"></a>JS获取当前时间的对应日期格式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNowTime</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>());</span><br><span class="line"><span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="comment">// 在日期格式中，月份是从0开始的，因此要加0，使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05</span></span><br><span class="line"><span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> day = date.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getDate</span>() : date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">let</span> hours = date.<span class="title function_">getHours</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getHours</span>() : date.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">let</span> minutes = date.<span class="title function_">getMinutes</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getMinutes</span>() : date.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">let</span> seconds = date.<span class="title function_">getSeconds</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getSeconds</span>() : date.<span class="title function_">getSeconds</span>();</span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="keyword">let</span> nowTime = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span> + hours + <span class="string">&quot;:&quot;</span> + minutes + <span class="string">&quot;:&quot;</span> + seconds;</span><br><span class="line"><span class="keyword">return</span> nowTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS判断今天是一年中的第几天"><a href="#JS判断今天是一年中的第几天" class="headerlink" title="JS判断今天是一年中的第几天"></a>JS判断今天是一年中的第几天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取天数</span></span><br><span class="line">      <span class="keyword">function</span>  <span class="title function_">getDays</span>(<span class="params">year,month,day</span>)&#123;</span><br><span class="line">          <span class="comment">//先将每个月份的天数存入数组中</span></span><br><span class="line">          <span class="keyword">var</span> arr = [<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>];</span><br><span class="line">          <span class="comment">//将输入月份之前月份的天数累加</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; month -<span class="number">1</span>;i++)&#123;</span><br><span class="line">              day += arr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//判断是否是闰年且看是否大于2月(小于2月没必要考虑闰年问题)</span></span><br><span class="line">          <span class="keyword">if</span>(month &gt; <span class="number">2</span> &amp;&amp; <span class="title function_">isLeap</span>(year))&#123;</span><br><span class="line">              day ++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> day;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//先判断是否是闰年</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">isLeap</span>(<span class="params">year</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getDays</span>(year, mouth, day)); <span class="comment">//可以通过getDate()获取参数</span></span><br></pre></td></tr></table></figure><h2 id="JS得到今天是星期几"><a href="#JS得到今天是星期几" class="headerlink" title="JS得到今天是星期几"></a>JS得到今天是星期几</h2><blockquote><p>new Date().getDay()</p></blockquote><ul><li>这里的星期排序是星期天是第一天 根据下标形式来排序的 所以星期天是0这里要注意</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里记录下常见的js时间工具类方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;JS获取当前时间的对应日期格式&quot;&gt;&lt;a href=&quot;#JS获取当前时间的对应日期格式&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于小程序携带布尔值参数值改变的一点儿记录</title>
    <link href="http://example.com/2021/06/12/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82%E5%B8%83%E5%B0%94%E5%80%BC%E4%BC%9A%E6%94%B9%E5%8F%98%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/06/12/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82%E5%B8%83%E5%B0%94%E5%80%BC%E4%BC%9A%E6%94%B9%E5%8F%98%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-11T16:00:00.000Z</published>
    <updated>2022-06-28T01:24:37.324Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h2 id="小程序页面传参布尔值"><a href="#小程序页面传参布尔值" class="headerlink" title="小程序页面传参布尔值"></a>小程序页面传参布尔值</h2><p>小程序从页面携带参数跳转到其他页面是我们通常会这样做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: &#x27;/pages/index/detail?id=&#x27; + id + &#x27;&amp;succeedShow=false&#x27;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>但是 当我们这样做并且携带参数是布尔值时，到达新页面通过onload接收时变量通过 <code>typeof</code>  可见已经由布尔值转变为了字符串的true&#x2F;false，<img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220504143618774.png" alt="image-20220504143618774"></p><p>这就导致了不管if还是取反判断都是不成立的。这里我们通过对字符串布尔判断 来使判断成立</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 原三目运算符判断</span><br><span class="line">  succeedShow: options.succeedShow ? options.succeedShow :false</span><br></pre></td></tr></table></figure><p>改为对字符串的判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">succeedShow: (options.succeedShow == &quot;true&quot; ? true : false)</span><br></pre></td></tr></table></figure><h2 id="补充：web传参布尔值"><a href="#补充：web传参布尔值" class="headerlink" title="补充：web传参布尔值"></a>补充：web传参布尔值</h2><p>因为我是后端 没有长接触前端知识 这里在使用中发现应该是js都有这个问题吧  通过地址栏传参后页面刷新后会将布尔类型传递为字符串布尔值 这里通过后置判断对字符串的布尔进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isErr = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(query.<span class="property">isError</span> == <span class="string">&#x27;false&#x27;</span> || query.<span class="property">isError</span> == <span class="literal">false</span>)&#123; </span><br><span class="line">isErr = <span class="literal">false</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">isErr = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能通过页面的新变量 拿到正确的结果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;小程序页面传参布尔值&quot;&gt;&lt;a href=&quot;#小程序页面传参布尔值&quot; class=&quot;headerlink&quot; title=&quot;小程序页面传参布尔值&quot;&gt;&lt;/a&gt;小程序页面传参布尔值&lt;/h2&gt;&lt;p&gt;小程序从页面携带参数跳转到其他页面</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决布尔值变量is开头时 自动生成get/set没有is的问题</title>
    <link href="http://example.com/2021/06/12/%E8%A7%A3%E5%86%B3%E5%B8%83%E5%B0%94%E5%80%BC%E5%8F%98%E9%87%8Fis%E5%BC%80%E5%A4%B4%E6%97%B6%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90getset%E6%B2%A1%E6%9C%89is%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/06/12/%E8%A7%A3%E5%86%B3%E5%B8%83%E5%B0%94%E5%80%BC%E5%8F%98%E9%87%8Fis%E5%BC%80%E5%A4%B4%E6%97%B6%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90getset%E6%B2%A1%E6%9C%89is%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-11T16:00:00.000Z</published>
    <updated>2022-05-04T05:57:17.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>当我们在一个类中定义了Boolean或者boolean类型的变量，并且命名时使用<code>is</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用IDEA默认的配置生成get、set方法（快捷键：alt+insert）</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152455835-2107161874.png" alt="img"></p><p>会得到如下结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isEnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnable</span><span class="params">(Boolean enable)</span> &#123;</span><br><span class="line">        isEnable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDelete</span><span class="params">(<span class="type">boolean</span> delete)</span> &#123;</span><br><span class="line">        isDelete = delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，当变量为Boolean类型时，生成的get、set方法会自动去掉is；当变量为boolean时，get方法变为了</p><p>isDelete，set方法自动去掉is。这会导致部分框架在解析的时候报错。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>因为pojo类的命名不能采取is_xx的方式，这会让RPC 框架在反向解 析的时候发生错误。那么已经这样定义的怎么处理呢 简单点可以resultmap中对应 或者用下方展示的方法</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改IDEA生成get、set方法的模板，将上述情况下的变量生成时不忽略is。先用快捷键alt+insert打开菜单，点击<code>Getter and Setter</code></p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152515355-1357051181.png" alt="img"></p><p>然后点击<code>Getter template</code>和<code>Setter template</code>后面的按钮，增加自定义模板</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152529273-1825853771.png" alt="img"></p><p>自定义Getter template为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$paramName</span> = <span class="variable">$helper</span>.getParamName(<span class="variable">$field</span>, <span class="variable">$project</span>))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span>(<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">static ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.type <span class="comment">##</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$name</span> = <span class="variable">$StringUtil</span>.capitalizeWithJavaBeanConvention(<span class="variable">$StringUtil</span>.sanitizeJavaIdentifier(<span class="variable">$helper</span>.getPropertyName(<span class="variable">$field</span>, <span class="variable">$project</span>))))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (<span class="variable">$field</span>.name == <span class="variable">$paramName</span>)</span></span><br><span class="line"><span class="meta prompt_">get#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">getIs#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;name&#125;() &#123;</span></span><br><span class="line">return this.##</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.name;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Setter template为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$paramName</span> = <span class="variable">$helper</span>.getParamName(<span class="variable">$field</span>, <span class="variable">$project</span>))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span>(<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">static ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line">void ##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span>(<span class="variable">$name</span> = <span class="variable">$StringUtil</span>.capitalizeWithJavaBeanConvention(<span class="variable">$StringUtil</span>.sanitizeJavaIdentifier(<span class="variable">$helper</span>.getPropertyName(<span class="variable">$field</span>, <span class="variable">$project</span>))))</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (<span class="variable">$field</span>.name == <span class="variable">$paramName</span>)</span></span><br><span class="line"><span class="meta prompt_">set#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">setIs#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;name&#125;(<span class="variable">$field</span>.<span class="built_in">type</span> <span class="variable">$paramName</span>) &#123;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> (!<span class="variable">$field</span>.modifierStatic)</span></span><br><span class="line">this.##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line">    $classname.##</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">field.name = <span class="variable">$paramName</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>+</code>号新增即可，Setter template也是一样的操作</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152544812-571948054.png" alt="img"></p><p>添加完成后，生成get、set方法时，使用自定义模板即可</p><p><img src="https://img2020.cnblogs.com/blog/2061982/202008/2061982-20200828152556332-1852656323.png" alt="img"></p><p>得到结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isEnable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDelete</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getIsEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isEnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsEnable</span><span class="params">(Boolean enable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isEnable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getIsDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsDelete</span><span class="params">(<span class="type">boolean</span> delete)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDelete = delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题复现&quot;&gt;&lt;a href=&quot;#问题复现&quot; class=&quot;headerlink&quot; title=&quot;问题复现&quot;&gt;&lt;/a&gt;问题复现&lt;/h3&gt;&lt;p&gt;当我们在一个类中定义了Boolean或者boolean类型的变量，并且命名时使用&lt;code&gt;is&lt;/code&gt;开头&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决Incorrect string value问题</title>
    <link href="http://example.com/2020/10/12/%E8%A7%A3%E5%86%B3Incorrect%20string%20value%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/10/12/%E8%A7%A3%E5%86%B3Incorrect%20string%20value%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-11T16:00:00.000Z</published>
    <updated>2022-05-08T16:21:16.989Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目修改数据时因为插入emoji 而产生如下问题</p><blockquote><p>Caused by: java.sql.SQLException: Incorrect string value: ‘\xF0\x9F\x98\x98’</p></blockquote><p>出现原因：emoji表情是按照4个字节一个单位进行编码的，而我们使用的utf-8编码在mysql数据库中默认是按照3个字节一个单位进行编码的.</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>首先想到时数据库的设置 是否没有设计成utf8mb4字符集</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220508233955161.png" alt="image-20220508233955161"></p><p>显然不是这个问题，那么我们通过命令来看下 mysql的编码 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输入该查询语句</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span></span><br></pre></td></tr></table></figure><p>得到如下结果</p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220508234258678.png" alt="image-20220508234258678"></p><p>我们需要将默认编码的修改成mb4</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在mysql的安装目录下找到my.ini，也可以先上图配置的dir找到大概路径，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>保存修改，重启mysql服务，使修改生效</p><h3 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h3><p>顺嘴一提 这个比较简单，一起记录一下</p><ol><li>win+R ，输入services.msc，打开服务</li></ol><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509001223000.png" alt="image-20220509001223000" style="zoom:50%;" /><ol start="2"><li>在服务中找到myql服务</li></ol><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509001440018.png" alt="image-20220509001440018"></p><p>这里我用的是57我们通过管理员打开命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net stop MySQL57</span><br><span class="line">MySQL57 服务正在停止..</span><br><span class="line">MySQL57 服务已成功停止。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;net start MySQL57</span><br><span class="line">MySQL57 服务正在启动 .</span><br><span class="line">MySQL57 服务已经启动成功。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时修改的配置也已经生效了 </p><p><img src="https://cdn.jsdelivr.net/gh/forgetWorries/cloudPic/image-20220509002111890.png" alt="image-20220509002111890"></p><p>回去查看 emoji已经能够正常写入了~ 😀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;项目修改数据时因为插入emoji 而产生如下问题&lt;/p&gt;
&lt;blockquote&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux部署及基础环境配置(二)</title>
    <link href="http://example.com/2020/05/06/linux%E5%AF%B9nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2020/05/06/linux%E5%AF%B9nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-08-06T16:33:56.764Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/919141cbda346a1d323f3327aa596860d00dde78d02cd388f0e5afe48278ecc00dd9a7729b6102069011636b12c84f1d?pictype=scale&from=30113&version=3.3.3.3&uin=1643994375&fname=u=2805980902,2871858655&fm=26&gp=0.jpg&size=750"><span id="more"></span><br>单部署tomcat足够满足我们对后端项目的需要，但tomcat应当被理解为容器，要处理http server还应当更上一层 这时nginx是一个很好的选择</p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><ol><li>需要依赖的环境gcc、pcre-devel、zlib-devel、openssl-devel<blockquote><p>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</p></blockquote></li></ol><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>在nginx官网下载一个tar.gz包 并移动到&#x2F;usr&#x2F;local下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">## 解压</span><br><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class="line"></span><br><span class="line">##进入nginx目录</span><br><span class="line">cd nginx-1.9.9</span><br><span class="line">## 配置</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line"># make</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># cd到刚才配置的安装目录/usr/loca/nginx/</span><br><span class="line">./sbin/nginx -t</span><br><span class="line">出现success则为成功</span><br><span class="line"></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx //启动nginx</span><br></pre></td></tr></table></figure><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><blockquote><p>vi &#x2F;etc&#x2F;rc.d&#x2F;rc.local</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/964175/201705/964175-20170521122817057-1077865607.png"></p><h2 id="配置访问tomcat"><a href="#配置访问tomcat" class="headerlink" title="配置访问tomcat"></a>配置访问tomcat</h2><blockquote><p>vi &#x2F;conf&#x2F;nginx.conf</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/656746/201605/656746-20160510160506952-1299797999.png"></p><p>将选中部分的tomcat_server换成你的端口，下方链接相同即可完成配置</p><h2 id="配置HTTPS访问"><a href="#配置HTTPS访问" class="headerlink" title="配置HTTPS访问"></a>配置HTTPS访问</h2><p>在配置https访问前需要准备以下三点</p><ol><li>查看你的nginx是否安装了<code>http_ssl_module</code>模块</li><li>申请ssl证书</li><li>查看是否开启443端口</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>查看是否开启端口非常简单</p><blockquote><p>netstat -ano | grep 443</p></blockquote><p>申请证书也非常简单 各云上应该都有免费个人证书 规则填写即可签发</p><h4 id="是否安装https模块"><a href="#是否安装https模块" class="headerlink" title="是否安装https模块"></a>是否安装https模块</h4><blockquote><p>$ &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V  查看是否安装模块 在安装nginx编译时加上<code>--with-http_ssl_module</code>可以直接安装</p></blockquote><p>如果安装过 会出现 <code>configure arguments: --with-http_ssl_module</code>的字样，那么可以跳过安装步骤 下面记录以下 没有安装如何处理</p><h4 id="安装https模块"><a href="#安装https模块" class="headerlink" title="安装https模块"></a>安装https模块</h4><ol><li><p>先找到安装包的位置 如不记得 可以使用whereis或find的方式查找 cd到nginx安装包的根目录下，</p><blockquote><p>.&#x2F;configure –with-http_ssl_module  # 安装</p></blockquote></li><li><p>然后进行<code>make</code>操作 注意！这里不需要make install 不然就会覆盖</p></li><li><p>关闭掉现有的nginx服务器</p><blockquote><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</p></blockquote></li><li><p>cp .&#x2F;objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;   # 将新编译好的版本覆盖原有的nginx<br>这时已经完成了大部分工作 在nginx.conf同级创建一个文件夹将证书的公私钥放入文件夹中 我们回头去修改nginx.conf 文件的443端口内容</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">将443的server服务注释取消(如下方伪代码)</span><br><span class="line">server &#123;</span><br><span class="line">       listen       443 ssl ;</span><br><span class="line">       server_name  xxx;</span><br><span class="line"></span><br><span class="line">　　　　ssl_certificate &quot;/.../nginx/conf/xxx/1_www.xx.xxx.crt&quot;（你刚才传到服务器上的证书地址，叫你记住的哦）; </span><br><span class="line">　　　　ssl_certificate_key &quot;/.../nginx/conf/xxx/2_www.xxx.xx.key&quot;（你刚才传到服务器上的证书地址）;</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>保存文件 然后重启nginx  重启前我们阔以通过 nginx -t 检查当前配置是否正常</p><blockquote><p>nginx -s reload</p></blockquote><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>此时可能会出现 这样的画面<img src="https://upload-images.jianshu.io/upload_images/4424012-757bf8b721d4f65a.png"><br/>这是因为端口被占用 使用</p><blockquote><p>netstat -ntlp 查看被占用的端口<br>kill 进程号 再次重启即可</p></blockquote><h2 id="多项目部署"><a href="#多项目部署" class="headerlink" title="多项目部署"></a>多项目部署</h2><p>可以选择同容器部署，比如一个tomcat多项目，这里我选择了多tomcat单项目，需要在server.xml中修改三个默认监听端口，然后运行起来，在nginx.conf中新增一个server，和之前方式一样就可以了。</p><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h2 id="Http跳转Https"><a href="#Http跳转Https" class="headerlink" title="Http跳转Https"></a>Http跳转Https</h2><p>如无特殊需求阔以同时访问 跳转可以参考301跳转</p><h2 id="常用维护命令"><a href="#常用维护命令" class="headerlink" title="常用维护命令"></a>常用维护命令</h2><p>| 命令 | 说明  |<br>|:—————————-:|:—————————–:|<br>| .&#x2F;nginx -t| 查看当前配置是否书写正确|<br>| .&#x2F;nginx| 启动nginx|<br>| .&#x2F;nginx -s reload| 重启nginx|<br>| ps -ef &amp;#124; grep nginx| 查看nginx进程|<br>| kill -QUIT 主进程号| 从容停止|<br>| kill -TERM 主进程号| 快速停止|<br>| kill -9 nginx| 强制停止|</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/919141cbda346a1d323f3327aa596860d00dde78d02cd388f0e5afe48278ecc00dd9a7729b6102069011636b12c84f1d?pictype=scale&amp;from=30113&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=u=2805980902,2871858655&amp;fm=26&amp;gp=0.jpg&amp;size=750&quot;&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
    <category term="环境部署" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>linux部署及基础环境配置(四)</title>
    <link href="http://example.com/2020/05/06/linux%E5%AF%B9vue%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2020/05/06/linux%E5%AF%B9vue%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-08-06T16:33:45.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/ed8fae692a100101268339d836452c9046b2f478134fe0ca31089b000459981cc1d62217e105ba014619c323a3d6c1fe?pictype=scale&from=30013&version=3.3.3.3&uin=1643994375&fname=u=3472426374,1500119397&fm=26&gp=0.jpg&size=750"><br>记录一下关于node环境的安装及vue的打包部署<span id="more"></span></p><h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><p>这里我们可以去node的官网下载node的tar包 上传至服务器进行解压 </p><ol><li>tar -xvf   node-v10.13.0-linux-x64.tar #解压   </li><li>mv node-v10.13.0-linux-x64  nodejs #重命名</li><li>确定nodejs文件夹中是否包含 node文件夹</li><li>建立软连接，改变为全局(这里一定要注意不要写错)<ol><li>ln -s &#x2F;app&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F; </li><li>ln -s &#x2F;app&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</li></ol></li><li>安装cnpm–国内镜像速度比npm快很多<ol><li>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>ln -s &#x2F;home&#x2F;node&#x2F;node-v6.11.5-linux-x86&#x2F;bin&#x2F;cnpm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm</li></ol></li><li>安装vue脚手架vue-cli <ol><li>cnpm install -g vue-cli</li><li>ln -s &#x2F;home&#x2F;formularoom&#x2F;env&#x2F;node-v8.1.2-linux-x64&#x2F;bin&#x2F;vue &#x2F;usr&#x2F;local&#x2F;bin&#x2F;vue</li></ol></li></ol><h2 id="vue打包"><a href="#vue打包" class="headerlink" title="vue打包"></a>vue打包</h2><p>当我们使用vue-cli脚手架完成一个项目的时候，下一步肯定会想要怎么把这个项目放到互联网上或者本地直接打开呢，我们在本地调试的时候只要命令行执行npm run dev就可以把这个项目跑起来，但是现在我们要把他放到服务器上的话用npm run build命令就可以啦。<br><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/c491add109360111041059ac4d2f372c02e34d6fd893f8f4aabc9ba9e8e32f9f5458f076d33213218b3a1b5ecdd823c6?pictype=scale&from=30013&version=3.3.3.3&uin=1643994375&fname=b8e81b31gy1fv36s1uk7yj20rt0eawgb.jpg&size=750"><br>在执行完成后会生成一个dist的文件夹 我们将文件中的static文件夹和index页面打包上传服务器</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>在图中能够清晰的看到文件中有一个提示tip:xxxx HTTP server; 这里就是告诉我们 vue打包后需要一个http服务 才能够启动 可以使用apache nginx等 这里我们记录使用nginx配置的过程</p><h2 id="nginx部署vue"><a href="#nginx部署vue" class="headerlink" title="nginx部署vue"></a>nginx部署vue</h2><p>nginx部署vue就显得十分简单了 在nginx中新启一个server 将文件填写如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen &#123;port&#125;;</span><br><span class="line">        server_name www.xxxx.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            alias /address/...;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">配置完成后保存文件 检查当前nginx配置是否书写正确 然后重启nginx即可</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/ed8fae692a100101268339d836452c9046b2f478134fe0ca31089b000459981cc1d62217e105ba014619c323a3d6c1fe?pictype=scale&amp;from=30013&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=u=3472426374,1500119397&amp;fm=26&amp;gp=0.jpg&amp;size=750&quot;&gt;&lt;br&gt;记录一下关于node环境的安装及vue的打包部署</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="环境部署" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>linux部署及基础环境配置(三)</title>
    <link href="http://example.com/2020/05/06/linux%E5%AF%B9redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2020/05/06/linux%E5%AF%B9redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-08-06T16:34:41.253Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180327/34adc98d775145f0b23c5fa67217af1d.png"><br>本次记录是关于中控服务的问题记载<span id="more"></span>，场景是获取微信accessToken留存使用 其有效时长为两小时</p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ol><li>先确保我们拥有gcc 因为redis是c编写的<blockquote><p>yum install gcc-c++</p></blockquote></li><li>下载redis安装包<blockquote><p>wget <a href="http://download.redis.io/releases/redis-5.0.4.tar.gz">http://download.redis.io/releases/redis-5.0.4.tar.gz</a></p></blockquote></li><li>解压安装包<blockquote><p>tar -zxf redis-5.0.4.tar.gz</p></blockquote></li><li>编译<blockquote><p>cd redis-5.0.4<br>make</p></blockquote></li><li>安装<blockquote><p>make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install</p></blockquote></li><li>copy redis.conf到安装目录<blockquote><p>cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis</p></blockquote></li><li>进入安装目录<blockquote><p>cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</p></blockquote></li><li>修改conf文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line">1.后台启动，daemonize yes</span><br><span class="line">2.绑定端口，port 6379 默认是6379 需要安全组开放端口</span><br><span class="line">3.指定数据存放路径，dir /usr/local/redis/log rdb存放的路径</span><br><span class="line">4.指定持久化方式，appendonly yes</span><br></pre></td></tr></table></figure></li><li>启动redis<blockquote><p> .&#x2F;bin&#x2F;redis-server .&#x2F;redis.conf</p></blockquote></li><li>查看进程<blockquote><p>ps aux | grep redis</p></blockquote></li><li>进入客户端<blockquote><p>.&#x2F;bin&#x2F;redis-cli –raw 处理中文乱码问题</p></blockquote></li><li>get&#x2F;set 测试是否能够正常使用</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 新增pom文件</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">2.application</span><br><span class="line">## Redis 配置</span><br><span class="line">## Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line">## Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">## Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">## Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line">## 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-active=8</span><br><span class="line">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-wait=-1</span><br><span class="line">## 连接池中的最大空闲连接</span><br><span class="line">spring.redis.jedis.pool.max-idle=8</span><br><span class="line">## 连接池中的最小空闲连接</span><br><span class="line">spring.redis.jedis.pool.min-idle=0</span><br><span class="line">## 连接超时时间（毫秒）</span><br><span class="line">spring.redis.jedis.timeout=1200</span><br></pre></td></tr></table></figure><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">controller</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">if (stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;) == null)&#123;</span><br><span class="line">        String accessToken = xx.accessToken();//此处省略获取accessToken步骤</span><br><span class="line">        stringRedisTemplate.opsForValue().set(&quot;accessToken&quot;,accessToken,7000, TimeUnit.SECONDS);</span><br><span class="line">        return ResponseVO.success(accessToken);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        String accessToken = stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;);</span><br><span class="line">        return ResponseVO.success(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>如此就能够实现中控服务的功能了。这里只是简单的用到了RedisTemplate的参数 下面记录一些常用参数</p><p>| 命令名称 | 说明  |<br>|:——————–:|:————————-:|<br>| set(K key, V value)| 新增一个字符串类型的值,key是键，value是值|<br>| get(Object key)| 获取key键对应的值|<br>| append(K key, String value)|在原有的值基础上新增字符串到末尾|<br>| get(K key, long start, long end)|截取key键对应值得字符串，从开始下标位置开始到结束下标的位置(包含结束下标)的字符串。|<br>| getAndSet(K key, V value)|获取原来key键对应的值并重新赋新值|<br>| setBit(K key, long offset, boolean value)|key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value|<br>| getBit(K key, long offset)|判断指定的位置ASCII码的bit位是否为1|<br>|size(K key)|获取指定字符串的长度|<br>|increment(K key, double delta)|以增量的方式将double值存储在变量中|<br>|setIfAbsent(K key, V value)|如果键不存在则新增,存在则不改变已经有的值|<br>|set(K key, V value, long timeout, TimeUnit unit)|设置变量值的过期时间|<br>|set(K key, V value, long offset)|覆盖从指定位置开始的值|<br>|multiSet(Map&lt;? extends K,? extends V&gt; map)|设置map集合到redis|<br>|multiGet(Collection<K> keys)|  根据集合取出对应的value值|<br>|multiSetIfAbsent(Map&lt;? extends K,? extends V&gt; map)|如果对应的map集合名称不存在，则添加，如果存在则不做修改|</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://5b0988e595225.cdn.sohucs.com/images/20180327/34adc98d775145f0b23c5fa67217af1d.png&quot;&gt;&lt;br&gt;本次记录是关于中控服务的问题记载</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="环境部署" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>linux部署项目及基础环境配置</title>
    <link href="http://example.com/2020/05/06/linux%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2020/05/06/linux%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-08-06T16:34:05.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572539107105&di=ee5855b3a21e084846f90f7ab58c7452&imgtype=0&src=http://09imgmini.eastday.com/mobile/20190523/20190523175202_fbc1aa4f3ec6332b6841d32388619c53_1.jpeg"></p><span id="more"></span><p>记录一下关于linux服务器的项目环境安装和部署</p><h2 id="所选环境"><a href="#所选环境" class="headerlink" title="所选环境"></a>所选环境</h2><p>CentOS6.8+JDK8+MySQL+Tomcat</p><h2 id="安装server端MySQL"><a href="#安装server端MySQL" class="headerlink" title="安装server端MySQL"></a>安装server端MySQL</h2><p>使用yum命令安装MySQL</p><blockquote><p>yum install -y mysql mysql-server</p></blockquote><p>等待安装完成MySQL部分就基本安装完成了，但是此时的MySQL默认是只有本机(locathost)能够连接的，在终端登陆MySQL修改远程连接的SQL；</p><p><code>mysql&gt;select host,user from mysql.user;</code><br><code>mysql&gt;update user set host=&#39;%&#39; where user=&#39;root&#39; and host=&#39;127.0.0.1&#39;;</code><br>然后刷新MySQL,然后就可以远程连接了<br><code>mysql&gt;flush privileges;</code></p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>解压JDK的压缩包<br><code>tar -zxf jdk-xx-xxx...</code><br>vi &#x2F;etc&#x2F;profile 配置jdk环境变量</p><blockquote><p>export JAVA_HOME&#x3D;pwd得到的jdk路径<br>exprot PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<br>配置好后刷新profile文件配置 -&gt;source &#x2F;etc&#x2F;profile<br>配置时注意等号两边不要有空格不然会出现乱七八糟的报错</p></blockquote><p>刷新后输入java-version出现了熟悉的版本号命令行</p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><p>同jdk第一步，解压后apache目录中有很多文件 要运行的war包要放入webapps中，默认运行的项目名为ROOT；bin目录中负责apache的启动和停止</p><blockquote><p>启动→.&#x2F;startup.sh    停止→.&#x2F;shutdown.sh</p></blockquote><p>启动后通过tail命令查看日志，如无报错 即可正常访问</p><blockquote><p>tail -f logs&#x2F;catalina.out 查看tomcat的日志</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.mysql和tomcat的端口都需要在iptables文件中增加，否则远程连接和访问8080时会出现无法连接<img src="https://img-blog.csdnimg.cn/20190122221632234.png"></p><blockquote><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables<br>-A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT<br>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT<br>刷新配置文件 -&gt; service iptables restart<br>这里需要注意 新增的端口信息一定要在icmp-host-prohibited之前</p></blockquote><p>2.可能存在端口占用</p><blockquote><p>netstat -nltp | grep 端口号 然后kill掉进程号即可</p></blockquote><p><img src="https://img-blog.csdn.net/20180320153334793?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3UwMTI5Nzk4NjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br>3.上图问题是没有开启mysql服务，可以是设置自启也可以运行以下命令</p><blockquote><p>service mysqld start</p></blockquote><h2 id="关于压缩包"><a href="#关于压缩包" class="headerlink" title="关于压缩包"></a>关于压缩包</h2><p>关于上传相应压缩包，可以使用ftp也可以通过yum源安装工具</p><blockquote><pre><code>yum install -y lrzsz  rz上传 sz下载</code></pre></blockquote><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>基础就是这些，其他负载啥的以后填坑</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1572539107105&amp;di=ee5855b3a21e084846f90f7ab58c7452&amp;imgtype=0&amp;src=http://09imgmini.eastday.com/mobile/20190523/20190523175202_fbc1aa4f3ec6332b6841d32388619c53_1.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="环境部署" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Linux操作" scheme="http://example.com/tags/Linux%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>vmware安装centos7</title>
    <link href="http://example.com/2020/05/06/vmware%E5%AE%89%E8%A3%85centos7/"/>
    <id>http://example.com/2020/05/06/vmware%E5%AE%89%E8%A3%85centos7/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-08-06T16:44:01.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>虚拟机镜像 <a href="https://mirrors.aliyun.com/centos/">下载地址-阿里云镜像</a></p></li><li><p>vmware 这里我们用VMware 16Pro来进行演示<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806143518849.png" alt="image-20220806143518849"></p></li><li><h2 id="查看宿主机配置是否满足虚拟机安装运行的最低要求"><a href="#查看宿主机配置是否满足虚拟机安装运行的最低要求" class="headerlink" title="查看宿主机配置是否满足虚拟机安装运行的最低要求"></a>查看宿主机配置是否满足虚拟机安装运行的最低要求</h2></li></ol><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><ol><li>创建虚拟机，点击文件-》新建虚拟机</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806143742494.png" alt="image-20220806143742494"></p><ol start="2"><li>进入向导 这里我们选择自定义安装 方便自行资源配比</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806144101347.png" alt="image-20220806144101347"></p><ol start="3"><li><p>然后默认下一步下一步到→安装客户机操作系统 这里我们选择稍后安装先创建一个空白盘<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806144334966.png" alt="image-20220806144334966"></p></li><li><p>继续下一步到操作系统选择 选择linxu 64位系统<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806144449666.png" alt="image-20220806144449666"></p></li><li><p>自行选择虚拟机存放的位置及名称<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806145200495.png" alt="image-20220806145200495"></p></li><li><p>选择虚拟机处理器配置 这里安装时可以随意选择 后续可以修改 然后内存也是一样的 <img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806145410975.png" alt="image-20220806145410975"></p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806145537838.png" alt="image-20220806145537838"></p><ol start="7"><li>接下来是是选择网络 这里有四种模式  不联网模式 很容易理解 我们主要来记录下另外三种<ul><li>桥接模式：从桥接模式的介绍中我们可以看出虚拟机在上网时会和宿主机同级，自己产生一个IP</li><li>NAT模式：虚拟机通过宿主机才能进行通讯</li><li>仅主机：虚拟机与宿主机直接连接</li></ul></li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806145705289.png" alt="image-20220806145705289"></p><p>这里我选择了默认的nat模式</p><ol start="8"><li><p>接下来两部都是用推荐即可 直接下一步<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806150617253.png" alt="image-20220806150617253"></p></li><li><p>创建虚拟机磁盘</p><p>这里指定分配最大磁盘大小 如果要装很多环境建议给大些 要不扩容是个麻烦事儿，注意这里的红圈位置 不要勾选 勾选后会立即分配宿主机硬盘容量给虚拟机 会减少宿主机容量，勾选将虚拟磁盘拆分成多个文件，这样可以使虚拟机方便用储存设备拷贝</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806153809364.png" alt="image-20220806153809364"></p></li><li><p>然后命名再点击下一步</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154052803.png" alt="image-20220806154052803"></p><ol start="11"><li>注意 这时到了最后一步 不要点击完成 我们要先去配置镜像文件位置 完成将无法更改</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154252724.png" alt="image-20220806154252724"></p><ol start="12"><li>配置ISO文件所在位置，然后点击关闭</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154401662.png" alt="image-20220806154401662"></p><p>回到上一页后点击完成，就算创建成功了。</p><h3 id="安装centos"><a href="#安装centos" class="headerlink" title="安装centos"></a>安装centos</h3><ol><li>启动虚拟机</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154605402.png" alt="image-20220806154605402"></p><ol start="2"><li><p>看到界面 直接回车进入安装<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154736460.png" alt="image-20220806154736460"></p></li><li><p>静待片刻 看到centos图形化界面 选择语言</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806154831384.png" alt="image-20220806154831384"></p><ol start="4"><li><p>首先设置时间 时区选择亚洲上海 然后设置时间 如图所示 完成后按done保存返回<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806155241727.png" alt="image-20220806155241727"></p></li><li><p>然后点击图示按钮 进行磁盘划分 选择i wil configure partitioning（我将会配置分区），然后点击done<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806155520244.png" alt="image-20220806155520244"></p></li><li><p>进入配置分区界面 如图去配置每个分区大小完成后点击done即可<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806160010187.png" alt="image-20220806160010187"></p></li></ol><p>然后选择accept按钮 确认修改</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806160106335.png" alt="image-20220806160106335"></p><ol start="7"><li>设置主机名和网卡</li></ol><p>这里主机名就使用默认的了 网卡需要调整到打开状态 能看到ip证明打开了<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806160346515.png" alt="image-20220806160346515"></p><ol start="8"><li><p>一起准备就绪 点击开始安装按钮<img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806160513679.png" alt="image-20220806160513679"></p></li><li><p>最后 这里需要我们设置用户和root密码 具体就不去展示了 密码框如下图 这里注意 如果设置的密码太简单 需要按两下done进行确认保存</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806160702779.png" alt="image-20220806160702779"></p><p>最后的等待进度条跑完 重启 就安装完成了</p><p><img src="https://cdn.jsdelivr.net/gh/wwwyyj/cloudPic@main/image-20220806161103462.png" alt="image-20220806161103462"></p><p>最近会把之前的安装类博文全部迁移回来做个补充</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;虚拟机镜像 &lt;a href=&quot;https://mirrors.aliyun.com/centos/&quot;&gt;下载</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="环境部署" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
